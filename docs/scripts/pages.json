[
  {
    "name": "COPIED",
    "description": "com.tecknobit.glidercore.enums.PasswordEventType.COPIED",
    "location": "core/com.tecknobit.glidercore.enums/-password-event-type/-c-o-p-i-e-d/index.html",
    "searchKeys": [
      "COPIED",
      "COPIED",
      "com.tecknobit.glidercore.enums.PasswordEventType.COPIED"
    ]
  },
  {
    "name": "DESKTOP",
    "description": "com.tecknobit.glidercore.enums.ConnectedDeviceType.DESKTOP",
    "location": "core/com.tecknobit.glidercore.enums/-connected-device-type/-d-e-s-k-t-o-p/index.html",
    "searchKeys": [
      "DESKTOP",
      "DESKTOP",
      "com.tecknobit.glidercore.enums.ConnectedDeviceType.DESKTOP"
    ]
  },
  {
    "name": "EDITED",
    "description": "com.tecknobit.glidercore.enums.PasswordEventType.EDITED",
    "location": "core/com.tecknobit.glidercore.enums/-password-event-type/-e-d-i-t-e-d/index.html",
    "searchKeys": [
      "EDITED",
      "EDITED",
      "com.tecknobit.glidercore.enums.PasswordEventType.EDITED"
    ]
  },
  {
    "name": "GENERATED",
    "description": "com.tecknobit.glidercore.enums.PasswordEventType.GENERATED",
    "location": "core/com.tecknobit.glidercore.enums/-password-event-type/-g-e-n-e-r-a-t-e-d/index.html",
    "searchKeys": [
      "GENERATED",
      "GENERATED",
      "com.tecknobit.glidercore.enums.PasswordEventType.GENERATED"
    ]
  },
  {
    "name": "GENERATED",
    "description": "com.tecknobit.glidercore.enums.PasswordType.GENERATED",
    "location": "core/com.tecknobit.glidercore.enums/-password-type/-g-e-n-e-r-a-t-e-d/index.html",
    "searchKeys": [
      "GENERATED",
      "GENERATED",
      "com.tecknobit.glidercore.enums.PasswordType.GENERATED"
    ]
  },
  {
    "name": "INSERTED",
    "description": "com.tecknobit.glidercore.enums.PasswordEventType.INSERTED",
    "location": "core/com.tecknobit.glidercore.enums/-password-event-type/-i-n-s-e-r-t-e-d/index.html",
    "searchKeys": [
      "INSERTED",
      "INSERTED",
      "com.tecknobit.glidercore.enums.PasswordEventType.INSERTED"
    ]
  },
  {
    "name": "INSERTED",
    "description": "com.tecknobit.glidercore.enums.PasswordType.INSERTED",
    "location": "core/com.tecknobit.glidercore.enums/-password-type/-i-n-s-e-r-t-e-d/index.html",
    "searchKeys": [
      "INSERTED",
      "INSERTED",
      "com.tecknobit.glidercore.enums.PasswordType.INSERTED"
    ]
  },
  {
    "name": "MOBILE",
    "description": "com.tecknobit.glidercore.enums.ConnectedDeviceType.MOBILE",
    "location": "core/com.tecknobit.glidercore.enums/-connected-device-type/-m-o-b-i-l-e/index.html",
    "searchKeys": [
      "MOBILE",
      "MOBILE",
      "com.tecknobit.glidercore.enums.ConnectedDeviceType.MOBILE"
    ]
  },
  {
    "name": "REFRESHED",
    "description": "com.tecknobit.glidercore.enums.PasswordEventType.REFRESHED",
    "location": "core/com.tecknobit.glidercore.enums/-password-event-type/-r-e-f-r-e-s-h-e-d/index.html",
    "searchKeys": [
      "REFRESHED",
      "REFRESHED",
      "com.tecknobit.glidercore.enums.PasswordEventType.REFRESHED"
    ]
  },
  {
    "name": "WEB",
    "description": "com.tecknobit.glidercore.enums.ConnectedDeviceType.WEB",
    "location": "core/com.tecknobit.glidercore.enums/-connected-device-type/-w-e-b/index.html",
    "searchKeys": [
      "WEB",
      "WEB",
      "com.tecknobit.glidercore.enums.ConnectedDeviceType.WEB"
    ]
  },
  {
    "name": "const val BRAND_KEY: String",
    "description": "com.tecknobit.glidercore.BRAND_KEY",
    "location": "core/com.tecknobit.glidercore/-b-r-a-n-d_-k-e-y.html",
    "searchKeys": [
      "BRAND_KEY",
      "const val BRAND_KEY: String",
      "com.tecknobit.glidercore.BRAND_KEY"
    ]
  },
  {
    "name": "const val BROWSER_KEY: String",
    "description": "com.tecknobit.glidercore.BROWSER_KEY",
    "location": "core/com.tecknobit.glidercore/-b-r-o-w-s-e-r_-k-e-y.html",
    "searchKeys": [
      "BROWSER_KEY",
      "const val BROWSER_KEY: String",
      "com.tecknobit.glidercore.BROWSER_KEY"
    ]
  },
  {
    "name": "const val DEVICES_KEY: String",
    "description": "com.tecknobit.glidercore.DEVICES_KEY",
    "location": "core/com.tecknobit.glidercore/-d-e-v-i-c-e-s_-k-e-y.html",
    "searchKeys": [
      "DEVICES_KEY",
      "const val DEVICES_KEY: String",
      "com.tecknobit.glidercore.DEVICES_KEY"
    ]
  },
  {
    "name": "const val DEVICE_IDENTIFIER_KEY: String",
    "description": "com.tecknobit.glidercore.DEVICE_IDENTIFIER_KEY",
    "location": "core/com.tecknobit.glidercore/-d-e-v-i-c-e_-i-d-e-n-t-i-f-i-e-r_-k-e-y.html",
    "searchKeys": [
      "DEVICE_IDENTIFIER_KEY",
      "const val DEVICE_IDENTIFIER_KEY: String",
      "com.tecknobit.glidercore.DEVICE_IDENTIFIER_KEY"
    ]
  },
  {
    "name": "const val DEVICE_KEY: String",
    "description": "com.tecknobit.glidercore.DEVICE_KEY",
    "location": "core/com.tecknobit.glidercore/-d-e-v-i-c-e_-k-e-y.html",
    "searchKeys": [
      "DEVICE_KEY",
      "const val DEVICE_KEY: String",
      "com.tecknobit.glidercore.DEVICE_KEY"
    ]
  },
  {
    "name": "const val EVENTS_KEY: String",
    "description": "com.tecknobit.glidercore.EVENTS_KEY",
    "location": "core/com.tecknobit.glidercore/-e-v-e-n-t-s_-k-e-y.html",
    "searchKeys": [
      "EVENTS_KEY",
      "const val EVENTS_KEY: String",
      "com.tecknobit.glidercore.EVENTS_KEY"
    ]
  },
  {
    "name": "const val EVENT_DATE_KEY: String",
    "description": "com.tecknobit.glidercore.EVENT_DATE_KEY",
    "location": "core/com.tecknobit.glidercore/-e-v-e-n-t_-d-a-t-e_-k-e-y.html",
    "searchKeys": [
      "EVENT_DATE_KEY",
      "const val EVENT_DATE_KEY: String",
      "com.tecknobit.glidercore.EVENT_DATE_KEY"
    ]
  },
  {
    "name": "const val INCLUDE_NUMBERS_KEY: String",
    "description": "com.tecknobit.glidercore.INCLUDE_NUMBERS_KEY",
    "location": "core/com.tecknobit.glidercore/-i-n-c-l-u-d-e_-n-u-m-b-e-r-s_-k-e-y.html",
    "searchKeys": [
      "INCLUDE_NUMBERS_KEY",
      "const val INCLUDE_NUMBERS_KEY: String",
      "com.tecknobit.glidercore.INCLUDE_NUMBERS_KEY"
    ]
  },
  {
    "name": "const val INCLUDE_SPECIAL_CHARACTERS_KEY: String",
    "description": "com.tecknobit.glidercore.INCLUDE_SPECIAL_CHARACTERS_KEY",
    "location": "core/com.tecknobit.glidercore/-i-n-c-l-u-d-e_-s-p-e-c-i-a-l_-c-h-a-r-a-c-t-e-r-s_-k-e-y.html",
    "searchKeys": [
      "INCLUDE_SPECIAL_CHARACTERS_KEY",
      "const val INCLUDE_SPECIAL_CHARACTERS_KEY: String",
      "com.tecknobit.glidercore.INCLUDE_SPECIAL_CHARACTERS_KEY"
    ]
  },
  {
    "name": "const val INCLUDE_UPPERCASE_LETTERS_KEY: String",
    "description": "com.tecknobit.glidercore.INCLUDE_UPPERCASE_LETTERS_KEY",
    "location": "core/com.tecknobit.glidercore/-i-n-c-l-u-d-e_-u-p-p-e-r-c-a-s-e_-l-e-t-t-e-r-s_-k-e-y.html",
    "searchKeys": [
      "INCLUDE_UPPERCASE_LETTERS_KEY",
      "const val INCLUDE_UPPERCASE_LETTERS_KEY: String",
      "com.tecknobit.glidercore.INCLUDE_UPPERCASE_LETTERS_KEY"
    ]
  },
  {
    "name": "const val KEYCHAIN_ENDPOINT: String",
    "description": "com.tecknobit.glidercore.helpers.GliderEndpointsSet.KEYCHAIN_ENDPOINT",
    "location": "core/com.tecknobit.glidercore.helpers/-glider-endpoints-set/-k-e-y-c-h-a-i-n_-e-n-d-p-o-i-n-t.html",
    "searchKeys": [
      "KEYCHAIN_ENDPOINT",
      "const val KEYCHAIN_ENDPOINT: String",
      "com.tecknobit.glidercore.helpers.GliderEndpointsSet.KEYCHAIN_ENDPOINT"
    ]
  },
  {
    "name": "const val LAST_LOGIN_KEY: String",
    "description": "com.tecknobit.glidercore.LAST_LOGIN_KEY",
    "location": "core/com.tecknobit.glidercore/-l-a-s-t_-l-o-g-i-n_-k-e-y.html",
    "searchKeys": [
      "LAST_LOGIN_KEY",
      "const val LAST_LOGIN_KEY: String",
      "com.tecknobit.glidercore.LAST_LOGIN_KEY"
    ]
  },
  {
    "name": "const val MODEL_KEY: String",
    "description": "com.tecknobit.glidercore.MODEL_KEY",
    "location": "core/com.tecknobit.glidercore/-m-o-d-e-l_-k-e-y.html",
    "searchKeys": [
      "MODEL_KEY",
      "const val MODEL_KEY: String",
      "com.tecknobit.glidercore.MODEL_KEY"
    ]
  },
  {
    "name": "const val PASSWORDS_KEY: String",
    "description": "com.tecknobit.glidercore.PASSWORDS_KEY",
    "location": "core/com.tecknobit.glidercore/-p-a-s-s-w-o-r-d-s_-k-e-y.html",
    "searchKeys": [
      "PASSWORDS_KEY",
      "const val PASSWORDS_KEY: String",
      "com.tecknobit.glidercore.PASSWORDS_KEY"
    ]
  },
  {
    "name": "const val PASSWORD_CONFIGURATIONS_KEY: String",
    "description": "com.tecknobit.glidercore.PASSWORD_CONFIGURATIONS_KEY",
    "location": "core/com.tecknobit.glidercore/-p-a-s-s-w-o-r-d_-c-o-n-f-i-g-u-r-a-t-i-o-n-s_-k-e-y.html",
    "searchKeys": [
      "PASSWORD_CONFIGURATIONS_KEY",
      "const val PASSWORD_CONFIGURATIONS_KEY: String",
      "com.tecknobit.glidercore.PASSWORD_CONFIGURATIONS_KEY"
    ]
  },
  {
    "name": "const val PASSWORD_EVENTS_KEY: String",
    "description": "com.tecknobit.glidercore.PASSWORD_EVENTS_KEY",
    "location": "core/com.tecknobit.glidercore/-p-a-s-s-w-o-r-d_-e-v-e-n-t-s_-k-e-y.html",
    "searchKeys": [
      "PASSWORD_EVENTS_KEY",
      "const val PASSWORD_EVENTS_KEY: String",
      "com.tecknobit.glidercore.PASSWORD_EVENTS_KEY"
    ]
  },
  {
    "name": "const val PASSWORD_IDENTIFIER_KEY: String",
    "description": "com.tecknobit.glidercore.PASSWORD_IDENTIFIER_KEY",
    "location": "core/com.tecknobit.glidercore/-p-a-s-s-w-o-r-d_-i-d-e-n-t-i-f-i-e-r_-k-e-y.html",
    "searchKeys": [
      "PASSWORD_IDENTIFIER_KEY",
      "const val PASSWORD_IDENTIFIER_KEY: String",
      "com.tecknobit.glidercore.PASSWORD_IDENTIFIER_KEY"
    ]
  },
  {
    "name": "const val PASSWORD_LENGTH_KEY: String",
    "description": "com.tecknobit.glidercore.PASSWORD_LENGTH_KEY",
    "location": "core/com.tecknobit.glidercore/-p-a-s-s-w-o-r-d_-l-e-n-g-t-h_-k-e-y.html",
    "searchKeys": [
      "PASSWORD_LENGTH_KEY",
      "const val PASSWORD_LENGTH_KEY: String",
      "com.tecknobit.glidercore.PASSWORD_LENGTH_KEY"
    ]
  },
  {
    "name": "const val REFRESH_ENDPOINT: String",
    "description": "com.tecknobit.glidercore.helpers.GliderEndpointsSet.REFRESH_ENDPOINT",
    "location": "core/com.tecknobit.glidercore.helpers/-glider-endpoints-set/-r-e-f-r-e-s-h_-e-n-d-p-o-i-n-t.html",
    "searchKeys": [
      "REFRESH_ENDPOINT",
      "const val REFRESH_ENDPOINT: String",
      "com.tecknobit.glidercore.helpers.GliderEndpointsSet.REFRESH_ENDPOINT"
    ]
  },
  {
    "name": "const val SCOPES_KEY: String",
    "description": "com.tecknobit.glidercore.SCOPES_KEY",
    "location": "core/com.tecknobit.glidercore/-s-c-o-p-e-s_-k-e-y.html",
    "searchKeys": [
      "SCOPES_KEY",
      "const val SCOPES_KEY: String",
      "com.tecknobit.glidercore.SCOPES_KEY"
    ]
  },
  {
    "name": "const val SCOPES_MAX_LENGTH: Int = 50",
    "description": "com.tecknobit.glidercore.helpers.GliderInputsValidator.SCOPES_MAX_LENGTH",
    "location": "core/com.tecknobit.glidercore.helpers/-glider-inputs-validator/-s-c-o-p-e-s_-m-a-x_-l-e-n-g-t-h.html",
    "searchKeys": [
      "SCOPES_MAX_LENGTH",
      "const val SCOPES_MAX_LENGTH: Int = 50",
      "com.tecknobit.glidercore.helpers.GliderInputsValidator.SCOPES_MAX_LENGTH"
    ]
  },
  {
    "name": "const val SESSION_IDENTIFIER_KEY: String",
    "description": "com.tecknobit.glidercore.SESSION_IDENTIFIER_KEY",
    "location": "core/com.tecknobit.glidercore/-s-e-s-s-i-o-n_-i-d-e-n-t-i-f-i-e-r_-k-e-y.html",
    "searchKeys": [
      "SESSION_IDENTIFIER_KEY",
      "const val SESSION_IDENTIFIER_KEY: String",
      "com.tecknobit.glidercore.SESSION_IDENTIFIER_KEY"
    ]
  },
  {
    "name": "const val TAIL_KEY: String",
    "description": "com.tecknobit.glidercore.TAIL_KEY",
    "location": "core/com.tecknobit.glidercore/-t-a-i-l_-k-e-y.html",
    "searchKeys": [
      "TAIL_KEY",
      "const val TAIL_KEY: String",
      "com.tecknobit.glidercore.TAIL_KEY"
    ]
  },
  {
    "name": "const val TAIL_MAX_LENGTH: Int = 30",
    "description": "com.tecknobit.glidercore.helpers.GliderInputsValidator.TAIL_MAX_LENGTH",
    "location": "core/com.tecknobit.glidercore.helpers/-glider-inputs-validator/-t-a-i-l_-m-a-x_-l-e-n-g-t-h.html",
    "searchKeys": [
      "TAIL_MAX_LENGTH",
      "const val TAIL_MAX_LENGTH: Int = 30",
      "com.tecknobit.glidercore.helpers.GliderInputsValidator.TAIL_MAX_LENGTH"
    ]
  },
  {
    "name": "const val TYPE_KEY: String",
    "description": "com.tecknobit.glidercore.TYPE_KEY",
    "location": "core/com.tecknobit.glidercore/-t-y-p-e_-k-e-y.html",
    "searchKeys": [
      "TYPE_KEY",
      "const val TYPE_KEY: String",
      "com.tecknobit.glidercore.TYPE_KEY"
    ]
  },
  {
    "name": "const val USER_DEVICES_KEY: String",
    "description": "com.tecknobit.glidercore.USER_DEVICES_KEY",
    "location": "core/com.tecknobit.glidercore/-u-s-e-r_-d-e-v-i-c-e-s_-k-e-y.html",
    "searchKeys": [
      "USER_DEVICES_KEY",
      "const val USER_DEVICES_KEY: String",
      "com.tecknobit.glidercore.USER_DEVICES_KEY"
    ]
  },
  {
    "name": "enum ConnectedDeviceType : Enum<ConnectedDeviceType> ",
    "description": "com.tecknobit.glidercore.enums.ConnectedDeviceType",
    "location": "core/com.tecknobit.glidercore.enums/-connected-device-type/index.html",
    "searchKeys": [
      "ConnectedDeviceType",
      "enum ConnectedDeviceType : Enum<ConnectedDeviceType> ",
      "com.tecknobit.glidercore.enums.ConnectedDeviceType"
    ]
  },
  {
    "name": "enum PasswordEventType : Enum<PasswordEventType> ",
    "description": "com.tecknobit.glidercore.enums.PasswordEventType",
    "location": "core/com.tecknobit.glidercore.enums/-password-event-type/index.html",
    "searchKeys": [
      "PasswordEventType",
      "enum PasswordEventType : Enum<PasswordEventType> ",
      "com.tecknobit.glidercore.enums.PasswordEventType"
    ]
  },
  {
    "name": "enum PasswordType : Enum<PasswordType> ",
    "description": "com.tecknobit.glidercore.enums.PasswordType",
    "location": "core/com.tecknobit.glidercore.enums/-password-type/index.html",
    "searchKeys": [
      "PasswordType",
      "enum PasswordType : Enum<PasswordType> ",
      "com.tecknobit.glidercore.enums.PasswordType"
    ]
  },
  {
    "name": "fun passwordLengthValid(passwordLength: Int): Boolean",
    "description": "com.tecknobit.glidercore.helpers.GliderInputsValidator.passwordLengthValid",
    "location": "core/com.tecknobit.glidercore.helpers/-glider-inputs-validator/password-length-valid.html",
    "searchKeys": [
      "passwordLengthValid",
      "fun passwordLengthValid(passwordLength: Int): Boolean",
      "com.tecknobit.glidercore.helpers.GliderInputsValidator.passwordLengthValid"
    ]
  },
  {
    "name": "fun scopesAreValid(scopes: String?): Boolean",
    "description": "com.tecknobit.glidercore.helpers.GliderInputsValidator.scopesAreValid",
    "location": "core/com.tecknobit.glidercore.helpers/-glider-inputs-validator/scopes-are-valid.html",
    "searchKeys": [
      "scopesAreValid",
      "fun scopesAreValid(scopes: String?): Boolean",
      "com.tecknobit.glidercore.helpers.GliderInputsValidator.scopesAreValid"
    ]
  },
  {
    "name": "fun tailIsValid(tail: String?): Boolean",
    "description": "com.tecknobit.glidercore.helpers.GliderInputsValidator.tailIsValid",
    "location": "core/com.tecknobit.glidercore.helpers/-glider-inputs-validator/tail-is-valid.html",
    "searchKeys": [
      "tailIsValid",
      "fun tailIsValid(tail: String?): Boolean",
      "com.tecknobit.glidercore.helpers.GliderInputsValidator.tailIsValid"
    ]
  },
  {
    "name": "fun valueOf(value: String): ConnectedDeviceType",
    "description": "com.tecknobit.glidercore.enums.ConnectedDeviceType.valueOf",
    "location": "core/com.tecknobit.glidercore.enums/-connected-device-type/value-of.html",
    "searchKeys": [
      "valueOf",
      "fun valueOf(value: String): ConnectedDeviceType",
      "com.tecknobit.glidercore.enums.ConnectedDeviceType.valueOf"
    ]
  },
  {
    "name": "fun valueOf(value: String): PasswordEventType",
    "description": "com.tecknobit.glidercore.enums.PasswordEventType.valueOf",
    "location": "core/com.tecknobit.glidercore.enums/-password-event-type/value-of.html",
    "searchKeys": [
      "valueOf",
      "fun valueOf(value: String): PasswordEventType",
      "com.tecknobit.glidercore.enums.PasswordEventType.valueOf"
    ]
  },
  {
    "name": "fun valueOf(value: String): PasswordType",
    "description": "com.tecknobit.glidercore.enums.PasswordType.valueOf",
    "location": "core/com.tecknobit.glidercore.enums/-password-type/value-of.html",
    "searchKeys": [
      "valueOf",
      "fun valueOf(value: String): PasswordType",
      "com.tecknobit.glidercore.enums.PasswordType.valueOf"
    ]
  },
  {
    "name": "fun values(): Array<ConnectedDeviceType>",
    "description": "com.tecknobit.glidercore.enums.ConnectedDeviceType.values",
    "location": "core/com.tecknobit.glidercore.enums/-connected-device-type/values.html",
    "searchKeys": [
      "values",
      "fun values(): Array<ConnectedDeviceType>",
      "com.tecknobit.glidercore.enums.ConnectedDeviceType.values"
    ]
  },
  {
    "name": "fun values(): Array<PasswordEventType>",
    "description": "com.tecknobit.glidercore.enums.PasswordEventType.values",
    "location": "core/com.tecknobit.glidercore.enums/-password-event-type/values.html",
    "searchKeys": [
      "values",
      "fun values(): Array<PasswordEventType>",
      "com.tecknobit.glidercore.enums.PasswordEventType.values"
    ]
  },
  {
    "name": "fun values(): Array<PasswordType>",
    "description": "com.tecknobit.glidercore.enums.PasswordType.values",
    "location": "core/com.tecknobit.glidercore.enums/-password-type/values.html",
    "searchKeys": [
      "values",
      "fun values(): Array<PasswordType>",
      "com.tecknobit.glidercore.enums.PasswordType.values"
    ]
  },
  {
    "name": "object GliderEndpointsSet : EquinoxBaseEndpointsSet",
    "description": "com.tecknobit.glidercore.helpers.GliderEndpointsSet",
    "location": "core/com.tecknobit.glidercore.helpers/-glider-endpoints-set/index.html",
    "searchKeys": [
      "GliderEndpointsSet",
      "object GliderEndpointsSet : EquinoxBaseEndpointsSet",
      "com.tecknobit.glidercore.helpers.GliderEndpointsSet"
    ]
  },
  {
    "name": "object GliderInputsValidator : InputsValidator",
    "description": "com.tecknobit.glidercore.helpers.GliderInputsValidator",
    "location": "core/com.tecknobit.glidercore.helpers/-glider-inputs-validator/index.html",
    "searchKeys": [
      "GliderInputsValidator",
      "object GliderInputsValidator : InputsValidator",
      "com.tecknobit.glidercore.helpers.GliderInputsValidator"
    ]
  },
  {
    "name": "private constructor()",
    "description": "com.tecknobit.glidercore.enums.ConnectedDeviceType.ConnectedDeviceType",
    "location": "core/com.tecknobit.glidercore.enums/-connected-device-type/-connected-device-type.html",
    "searchKeys": [
      "ConnectedDeviceType",
      "private constructor()",
      "com.tecknobit.glidercore.enums.ConnectedDeviceType.ConnectedDeviceType"
    ]
  },
  {
    "name": "private constructor()",
    "description": "com.tecknobit.glidercore.enums.PasswordEventType.PasswordEventType",
    "location": "core/com.tecknobit.glidercore.enums/-password-event-type/-password-event-type.html",
    "searchKeys": [
      "PasswordEventType",
      "private constructor()",
      "com.tecknobit.glidercore.enums.PasswordEventType.PasswordEventType"
    ]
  },
  {
    "name": "private constructor()",
    "description": "com.tecknobit.glidercore.enums.PasswordType.PasswordType",
    "location": "core/com.tecknobit.glidercore.enums/-password-type/-password-type.html",
    "searchKeys": [
      "PasswordType",
      "private constructor()",
      "com.tecknobit.glidercore.enums.PasswordType.PasswordType"
    ]
  },
  {
    "name": "val entries: EnumEntries<ConnectedDeviceType>",
    "description": "com.tecknobit.glidercore.enums.ConnectedDeviceType.entries",
    "location": "core/com.tecknobit.glidercore.enums/-connected-device-type/entries.html",
    "searchKeys": [
      "entries",
      "val entries: EnumEntries<ConnectedDeviceType>",
      "com.tecknobit.glidercore.enums.ConnectedDeviceType.entries"
    ]
  },
  {
    "name": "val entries: EnumEntries<PasswordEventType>",
    "description": "com.tecknobit.glidercore.enums.PasswordEventType.entries",
    "location": "core/com.tecknobit.glidercore.enums/-password-event-type/entries.html",
    "searchKeys": [
      "entries",
      "val entries: EnumEntries<PasswordEventType>",
      "com.tecknobit.glidercore.enums.PasswordEventType.entries"
    ]
  },
  {
    "name": "val entries: EnumEntries<PasswordType>",
    "description": "com.tecknobit.glidercore.enums.PasswordType.entries",
    "location": "core/com.tecknobit.glidercore.enums/-password-type/entries.html",
    "searchKeys": [
      "entries",
      "val entries: EnumEntries<PasswordType>",
      "com.tecknobit.glidercore.enums.PasswordType.entries"
    ]
  },
  {
    "name": "abstract class DefaultGliderController : EquinoxController<T, R, H> ",
    "description": "com.tecknobit.glider.services.shared.controllers.DefaultGliderController",
    "location": "backend/com.tecknobit.glider.services.shared.controllers/-default-glider-controller/index.html",
    "searchKeys": [
      "DefaultGliderController",
      "abstract class DefaultGliderController : EquinoxController<T, R, H> ",
      "com.tecknobit.glider.services.shared.controllers.DefaultGliderController"
    ]
  },
  {
    "name": "abstract fun attachDeviceToUser(sessionId: String, userId: String, deviceId: String)",
    "description": "com.tecknobit.glider.services.users.repositories.DevicesRepository.attachDeviceToUser",
    "location": "backend/com.tecknobit.glider.services.users.repositories/-devices-repository/attach-device-to-user.html",
    "searchKeys": [
      "attachDeviceToUser",
      "abstract fun attachDeviceToUser(sessionId: String, userId: String, deviceId: String)",
      "com.tecknobit.glider.services.users.repositories.DevicesRepository.attachDeviceToUser"
    ]
  },
  {
    "name": "abstract fun countDeviceReferences(deviceId: String): Long",
    "description": "com.tecknobit.glider.services.users.repositories.DevicesRepository.countDeviceReferences",
    "location": "backend/com.tecknobit.glider.services.users.repositories/-devices-repository/count-device-references.html",
    "searchKeys": [
      "countDeviceReferences",
      "abstract fun countDeviceReferences(deviceId: String): Long",
      "com.tecknobit.glider.services.users.repositories.DevicesRepository.countDeviceReferences"
    ]
  },
  {
    "name": "abstract fun countDevices(userId: String): Long",
    "description": "com.tecknobit.glider.services.users.repositories.DevicesRepository.countDevices",
    "location": "backend/com.tecknobit.glider.services.users.repositories/-devices-repository/count-devices.html",
    "searchKeys": [
      "countDevices",
      "abstract fun countDevices(userId: String): Long",
      "com.tecknobit.glider.services.users.repositories.DevicesRepository.countDevices"
    ]
  },
  {
    "name": "abstract fun deletePassword(passwordId: String)",
    "description": "com.tecknobit.glider.services.passwords.repositories.PasswordsRepository.deletePassword",
    "location": "backend/com.tecknobit.glider.services.passwords.repositories/-passwords-repository/delete-password.html",
    "searchKeys": [
      "deletePassword",
      "abstract fun deletePassword(passwordId: String)",
      "com.tecknobit.glider.services.passwords.repositories.PasswordsRepository.deletePassword"
    ]
  },
  {
    "name": "abstract fun disconnectDevice(userId: String, deviceId: String)",
    "description": "com.tecknobit.glider.services.users.repositories.DevicesRepository.disconnectDevice",
    "location": "backend/com.tecknobit.glider.services.users.repositories/-devices-repository/disconnect-device.html",
    "searchKeys": [
      "disconnectDevice",
      "abstract fun disconnectDevice(userId: String, deviceId: String)",
      "com.tecknobit.glider.services.users.repositories.DevicesRepository.disconnectDevice"
    ]
  },
  {
    "name": "abstract fun editGeneratedPassword(tail: String, scopes: String, passwordId: String)",
    "description": "com.tecknobit.glider.services.passwords.repositories.PasswordsRepository.editGeneratedPassword",
    "location": "backend/com.tecknobit.glider.services.passwords.repositories/-passwords-repository/edit-generated-password.html",
    "searchKeys": [
      "editGeneratedPassword",
      "abstract fun editGeneratedPassword(tail: String, scopes: String, passwordId: String)",
      "com.tecknobit.glider.services.passwords.repositories.PasswordsRepository.editGeneratedPassword"
    ]
  },
  {
    "name": "abstract fun editInsertedPassword(tail: String, scopes: String, password: String, passwordId: String)",
    "description": "com.tecknobit.glider.services.passwords.repositories.PasswordsRepository.editInsertedPassword",
    "location": "backend/com.tecknobit.glider.services.passwords.repositories/-passwords-repository/edit-inserted-password.html",
    "searchKeys": [
      "editInsertedPassword",
      "abstract fun editInsertedPassword(tail: String, scopes: String, password: String, passwordId: String)",
      "com.tecknobit.glider.services.passwords.repositories.PasswordsRepository.editInsertedPassword"
    ]
  },
  {
    "name": "abstract fun getDevices(userId: String, pageable: Pageable): List<DeviceLastLogin>",
    "description": "com.tecknobit.glider.services.users.repositories.DevicesRepository.getDevices",
    "location": "backend/com.tecknobit.glider.services.users.repositories/-devices-repository/get-devices.html",
    "searchKeys": [
      "getDevices",
      "abstract fun getDevices(userId: String, pageable: Pageable): List<DeviceLastLogin>",
      "com.tecknobit.glider.services.users.repositories.DevicesRepository.getDevices"
    ]
  },
  {
    "name": "abstract fun getPasswords(userId: String, types: Set<String>): List<Password>",
    "description": "com.tecknobit.glider.services.passwords.repositories.PasswordsRepository.getPasswords",
    "location": "backend/com.tecknobit.glider.services.passwords.repositories/-passwords-repository/get-passwords.html",
    "searchKeys": [
      "getPasswords",
      "abstract fun getPasswords(userId: String, types: Set<String>): List<Password>",
      "com.tecknobit.glider.services.passwords.repositories.PasswordsRepository.getPasswords"
    ]
  },
  {
    "name": "abstract fun refreshPassword(password: String, passwordId: String)",
    "description": "com.tecknobit.glider.services.passwords.repositories.PasswordsRepository.refreshPassword",
    "location": "backend/com.tecknobit.glider.services.passwords.repositories/-passwords-repository/refresh-password.html",
    "searchKeys": [
      "refreshPassword",
      "abstract fun refreshPassword(password: String, passwordId: String)",
      "com.tecknobit.glider.services.passwords.repositories.PasswordsRepository.refreshPassword"
    ]
  },
  {
    "name": "abstract fun updateLastLogin(userId: String, deviceId: String, lastLogin: Long)",
    "description": "com.tecknobit.glider.services.users.repositories.DevicesRepository.updateLastLogin",
    "location": "backend/com.tecknobit.glider.services.users.repositories/-devices-repository/update-last-login.html",
    "searchKeys": [
      "updateLastLogin",
      "abstract fun updateLastLogin(userId: String, deviceId: String, lastLogin: Long)",
      "com.tecknobit.glider.services.users.repositories.DevicesRepository.updateLastLogin"
    ]
  },
  {
    "name": "class DeviceLastLogin : Record",
    "description": "com.tecknobit.glider.services.users.dtos.DeviceLastLogin",
    "location": "backend/com.tecknobit.glider.services.users.dtos/-device-last-login/index.html",
    "searchKeys": [
      "DeviceLastLogin",
      "class DeviceLastLogin : Record",
      "com.tecknobit.glider.services.users.dtos.DeviceLastLogin"
    ]
  },
  {
    "name": "constructor()",
    "description": "com.tecknobit.glider.Launcher.Launcher",
    "location": "backend/com.tecknobit.glider/-launcher/-launcher.html",
    "searchKeys": [
      "Launcher",
      "constructor()",
      "com.tecknobit.glider.Launcher.Launcher"
    ]
  },
  {
    "name": "constructor()",
    "description": "com.tecknobit.glider.configuration.CORSAdvice.CORSAdvice",
    "location": "backend/com.tecknobit.glider.configuration/-c-o-r-s-advice/-c-o-r-s-advice.html",
    "searchKeys": [
      "CORSAdvice",
      "constructor()",
      "com.tecknobit.glider.configuration.CORSAdvice.CORSAdvice"
    ]
  },
  {
    "name": "constructor()",
    "description": "com.tecknobit.glider.services.passwords.controller.PasswordsController.PasswordsController",
    "location": "backend/com.tecknobit.glider.services.passwords.controller/-passwords-controller/-passwords-controller.html",
    "searchKeys": [
      "PasswordsController",
      "constructor()",
      "com.tecknobit.glider.services.passwords.controller.PasswordsController.PasswordsController"
    ]
  },
  {
    "name": "constructor()",
    "description": "com.tecknobit.glider.services.passwords.entities.Password.Password",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password/-password.html",
    "searchKeys": [
      "Password",
      "constructor()",
      "com.tecknobit.glider.services.passwords.entities.Password.Password"
    ]
  },
  {
    "name": "constructor()",
    "description": "com.tecknobit.glider.services.passwords.entities.PasswordConfiguration.PasswordConfiguration",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password-configuration/-password-configuration.html",
    "searchKeys": [
      "PasswordConfiguration",
      "constructor()",
      "com.tecknobit.glider.services.passwords.entities.PasswordConfiguration.PasswordConfiguration"
    ]
  },
  {
    "name": "constructor()",
    "description": "com.tecknobit.glider.services.passwords.entities.PasswordEvent.PasswordEvent",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password-event/-password-event.html",
    "searchKeys": [
      "PasswordEvent",
      "constructor()",
      "com.tecknobit.glider.services.passwords.entities.PasswordEvent.PasswordEvent"
    ]
  },
  {
    "name": "constructor()",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordEventsService.PasswordEventsService",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-password-events-service/-password-events-service.html",
    "searchKeys": [
      "PasswordEventsService",
      "constructor()",
      "com.tecknobit.glider.services.passwords.services.PasswordEventsService.PasswordEventsService"
    ]
  },
  {
    "name": "constructor()",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordsService.PasswordsService",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-passwords-service/-passwords-service.html",
    "searchKeys": [
      "PasswordsService",
      "constructor()",
      "com.tecknobit.glider.services.passwords.services.PasswordsService.PasswordsService"
    ]
  },
  {
    "name": "constructor()",
    "description": "com.tecknobit.glider.services.shared.controllers.DefaultGliderController.DefaultGliderController",
    "location": "backend/com.tecknobit.glider.services.shared.controllers/-default-glider-controller/-default-glider-controller.html",
    "searchKeys": [
      "DefaultGliderController",
      "constructor()",
      "com.tecknobit.glider.services.shared.controllers.DefaultGliderController.DefaultGliderController"
    ]
  },
  {
    "name": "constructor()",
    "description": "com.tecknobit.glider.services.users.controller.GliderUsersController.GliderUsersController",
    "location": "backend/com.tecknobit.glider.services.users.controller/-glider-users-controller/-glider-users-controller.html",
    "searchKeys": [
      "GliderUsersController",
      "constructor()",
      "com.tecknobit.glider.services.users.controller.GliderUsersController.GliderUsersController"
    ]
  },
  {
    "name": "constructor()",
    "description": "com.tecknobit.glider.services.users.dtos.DeviceLastLogin.DeviceLastLogin",
    "location": "backend/com.tecknobit.glider.services.users.dtos/-device-last-login/-device-last-login.html",
    "searchKeys": [
      "DeviceLastLogin",
      "constructor()",
      "com.tecknobit.glider.services.users.dtos.DeviceLastLogin.DeviceLastLogin"
    ]
  },
  {
    "name": "constructor()",
    "description": "com.tecknobit.glider.services.users.entities.ConnectedDevice.ConnectedDevice",
    "location": "backend/com.tecknobit.glider.services.users.entities/-connected-device/-connected-device.html",
    "searchKeys": [
      "ConnectedDevice",
      "constructor()",
      "com.tecknobit.glider.services.users.entities.ConnectedDevice.ConnectedDevice"
    ]
  },
  {
    "name": "constructor()",
    "description": "com.tecknobit.glider.services.users.entities.DeviceUserSession.DeviceUserSession",
    "location": "backend/com.tecknobit.glider.services.users.entities/-device-user-session/-device-user-session.html",
    "searchKeys": [
      "DeviceUserSession",
      "constructor()",
      "com.tecknobit.glider.services.users.entities.DeviceUserSession.DeviceUserSession"
    ]
  },
  {
    "name": "constructor()",
    "description": "com.tecknobit.glider.services.users.entities.GliderUser.GliderUser",
    "location": "backend/com.tecknobit.glider.services.users.entities/-glider-user/-glider-user.html",
    "searchKeys": [
      "GliderUser",
      "constructor()",
      "com.tecknobit.glider.services.users.entities.GliderUser.GliderUser"
    ]
  },
  {
    "name": "constructor()",
    "description": "com.tecknobit.glider.services.users.services.DevicesService.DevicesService",
    "location": "backend/com.tecknobit.glider.services.users.services/-devices-service/-devices-service.html",
    "searchKeys": [
      "DevicesService",
      "constructor()",
      "com.tecknobit.glider.services.users.services.DevicesService.DevicesService"
    ]
  },
  {
    "name": "constructor()",
    "description": "com.tecknobit.glider.services.users.services.GliderUsersService.GliderUsersService",
    "location": "backend/com.tecknobit.glider.services.users.services/-glider-users-service/-glider-users-service.html",
    "searchKeys": [
      "GliderUsersService",
      "constructor()",
      "com.tecknobit.glider.services.users.services.GliderUsersService.GliderUsersService"
    ]
  },
  {
    "name": "constructor(id: String, brand: String, model: String, browser: String, type: ConnectedDeviceType)",
    "description": "com.tecknobit.glider.services.users.entities.ConnectedDevice.ConnectedDevice",
    "location": "backend/com.tecknobit.glider.services.users.entities/-connected-device/-connected-device.html",
    "searchKeys": [
      "ConnectedDevice",
      "constructor(id: String, brand: String, model: String, browser: String, type: ConnectedDeviceType)",
      "com.tecknobit.glider.services.users.entities.ConnectedDevice.ConnectedDevice"
    ]
  },
  {
    "name": "constructor(id: String, creationDate: Long, tail: String, password: String, scopes: String, type: PasswordType, configuration: PasswordConfiguration, user: GliderUser)",
    "description": "com.tecknobit.glider.services.passwords.entities.Password.Password",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password/-password.html",
    "searchKeys": [
      "Password",
      "constructor(id: String, creationDate: Long, tail: String, password: String, scopes: String, type: PasswordType, configuration: PasswordConfiguration, user: GliderUser)",
      "com.tecknobit.glider.services.passwords.entities.Password.Password"
    ]
  },
  {
    "name": "constructor(id: String, creationDate: Long, tail: String, password: String, scopes: String, type: PasswordType, events: List<PasswordEvent>, configuration: PasswordConfiguration, user: GliderUser)",
    "description": "com.tecknobit.glider.services.passwords.entities.Password.Password",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password/-password.html",
    "searchKeys": [
      "Password",
      "constructor(id: String, creationDate: Long, tail: String, password: String, scopes: String, type: PasswordType, events: List<PasswordEvent>, configuration: PasswordConfiguration, user: GliderUser)",
      "com.tecknobit.glider.services.passwords.entities.Password.Password"
    ]
  },
  {
    "name": "constructor(id: String, eventDate: Long, type: PasswordEventType, password: Password)",
    "description": "com.tecknobit.glider.services.passwords.entities.PasswordEvent.PasswordEvent",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password-event/-password-event.html",
    "searchKeys": [
      "PasswordEvent",
      "constructor(id: String, eventDate: Long, type: PasswordEventType, password: Password)",
      "com.tecknobit.glider.services.passwords.entities.PasswordEvent.PasswordEvent"
    ]
  },
  {
    "name": "constructor(id: String, length: Int, includeNumbers: Boolean, includeUppercaseLetters: Boolean, includeSpecialCharacters: Boolean)",
    "description": "com.tecknobit.glider.services.passwords.entities.PasswordConfiguration.PasswordConfiguration",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password-configuration/-password-configuration.html",
    "searchKeys": [
      "PasswordConfiguration",
      "constructor(id: String, length: Int, includeNumbers: Boolean, includeUppercaseLetters: Boolean, includeSpecialCharacters: Boolean)",
      "com.tecknobit.glider.services.passwords.entities.PasswordConfiguration.PasswordConfiguration"
    ]
  },
  {
    "name": "constructor(id: String, token: String, name: String, surname: String, email: String, password: String, language: String, devices: List<DeviceUserSession>, passwords: List<Password>)",
    "description": "com.tecknobit.glider.services.users.entities.GliderUser.GliderUser",
    "location": "backend/com.tecknobit.glider.services.users.entities/-glider-user/-glider-user.html",
    "searchKeys": [
      "GliderUser",
      "constructor(id: String, token: String, name: String, surname: String, email: String, password: String, language: String, devices: List<DeviceUserSession>, passwords: List<Password>)",
      "com.tecknobit.glider.services.users.entities.GliderUser.GliderUser"
    ]
  },
  {
    "name": "constructor(jDevice: JSONObject)",
    "description": "com.tecknobit.glider.services.users.entities.ConnectedDevice.ConnectedDevice",
    "location": "backend/com.tecknobit.glider.services.users.entities/-connected-device/-connected-device.html",
    "searchKeys": [
      "ConnectedDevice",
      "constructor(jDevice: JSONObject)",
      "com.tecknobit.glider.services.users.entities.ConnectedDevice.ConnectedDevice"
    ]
  },
  {
    "name": "constructor(password: Password)",
    "description": "com.tecknobit.glider.services.passwords.dtos.PasswordMask.PasswordMask",
    "location": "backend/com.tecknobit.glider.services.passwords.dtos/-password-mask/-password-mask.html",
    "searchKeys": [
      "PasswordMask",
      "constructor(password: Password)",
      "com.tecknobit.glider.services.passwords.dtos.PasswordMask.PasswordMask"
    ]
  },
  {
    "name": "constructor(sessionId: String, device: ConnectedDevice, lastLogin: Long)",
    "description": "com.tecknobit.glider.services.users.entities.DeviceUserSession.DeviceUserSession",
    "location": "backend/com.tecknobit.glider.services.users.entities/-device-user-session/-device-user-session.html",
    "searchKeys": [
      "DeviceUserSession",
      "constructor(sessionId: String, device: ConnectedDevice, lastLogin: Long)",
      "com.tecknobit.glider.services.users.entities.DeviceUserSession.DeviceUserSession"
    ]
  },
  {
    "name": "interface DevicesRepository : JpaRepository<T, ID> ",
    "description": "com.tecknobit.glider.services.users.repositories.DevicesRepository",
    "location": "backend/com.tecknobit.glider.services.users.repositories/-devices-repository/index.html",
    "searchKeys": [
      "DevicesRepository",
      "interface DevicesRepository : JpaRepository<T, ID> ",
      "com.tecknobit.glider.services.users.repositories.DevicesRepository"
    ]
  },
  {
    "name": "interface GliderUsersRepository : EquinoxUsersRepository<T> ",
    "description": "com.tecknobit.glider.services.users.repositories.GliderUsersRepository",
    "location": "backend/com.tecknobit.glider.services.users.repositories/-glider-users-repository/index.html",
    "searchKeys": [
      "GliderUsersRepository",
      "interface GliderUsersRepository : EquinoxUsersRepository<T> ",
      "com.tecknobit.glider.services.users.repositories.GliderUsersRepository"
    ]
  },
  {
    "name": "interface PasswordEventsRepository : JpaRepository<T, ID> ",
    "description": "com.tecknobit.glider.services.passwords.repositories.PasswordEventsRepository",
    "location": "backend/com.tecknobit.glider.services.passwords.repositories/-password-events-repository/index.html",
    "searchKeys": [
      "PasswordEventsRepository",
      "interface PasswordEventsRepository : JpaRepository<T, ID> ",
      "com.tecknobit.glider.services.passwords.repositories.PasswordEventsRepository"
    ]
  },
  {
    "name": "interface PasswordsRepository : JpaRepository<T, ID> ",
    "description": "com.tecknobit.glider.services.passwords.repositories.PasswordsRepository",
    "location": "backend/com.tecknobit.glider.services.passwords.repositories/-passwords-repository/index.html",
    "searchKeys": [
      "PasswordsRepository",
      "interface PasswordsRepository : JpaRepository<T, ID> ",
      "com.tecknobit.glider.services.passwords.repositories.PasswordsRepository"
    ]
  },
  {
    "name": "open class CORSAdvice",
    "description": "com.tecknobit.glider.configuration.CORSAdvice",
    "location": "backend/com.tecknobit.glider.configuration/-c-o-r-s-advice/index.html",
    "searchKeys": [
      "CORSAdvice",
      "open class CORSAdvice",
      "com.tecknobit.glider.configuration.CORSAdvice"
    ]
  },
  {
    "name": "open class ConnectedDevice : EquinoxItem",
    "description": "com.tecknobit.glider.services.users.entities.ConnectedDevice",
    "location": "backend/com.tecknobit.glider.services.users.entities/-connected-device/index.html",
    "searchKeys": [
      "ConnectedDevice",
      "open class ConnectedDevice : EquinoxItem",
      "com.tecknobit.glider.services.users.entities.ConnectedDevice"
    ]
  },
  {
    "name": "open class DeviceUserSession : EquinoxItem",
    "description": "com.tecknobit.glider.services.users.entities.DeviceUserSession",
    "location": "backend/com.tecknobit.glider.services.users.entities/-device-user-session/index.html",
    "searchKeys": [
      "DeviceUserSession",
      "open class DeviceUserSession : EquinoxItem",
      "com.tecknobit.glider.services.users.entities.DeviceUserSession"
    ]
  },
  {
    "name": "open class DevicesService",
    "description": "com.tecknobit.glider.services.users.services.DevicesService",
    "location": "backend/com.tecknobit.glider.services.users.services/-devices-service/index.html",
    "searchKeys": [
      "DevicesService",
      "open class DevicesService",
      "com.tecknobit.glider.services.users.services.DevicesService"
    ]
  },
  {
    "name": "open class GliderUser : EquinoxUser",
    "description": "com.tecknobit.glider.services.users.entities.GliderUser",
    "location": "backend/com.tecknobit.glider.services.users.entities/-glider-user/index.html",
    "searchKeys": [
      "GliderUser",
      "open class GliderUser : EquinoxUser",
      "com.tecknobit.glider.services.users.entities.GliderUser"
    ]
  },
  {
    "name": "open class GliderUsersController : EquinoxUsersController<T, R, H> ",
    "description": "com.tecknobit.glider.services.users.controller.GliderUsersController",
    "location": "backend/com.tecknobit.glider.services.users.controller/-glider-users-controller/index.html",
    "searchKeys": [
      "GliderUsersController",
      "open class GliderUsersController : EquinoxUsersController<T, R, H> ",
      "com.tecknobit.glider.services.users.controller.GliderUsersController"
    ]
  },
  {
    "name": "open class GliderUsersService : EquinoxUsersService<T, R> ",
    "description": "com.tecknobit.glider.services.users.services.GliderUsersService",
    "location": "backend/com.tecknobit.glider.services.users.services/-glider-users-service/index.html",
    "searchKeys": [
      "GliderUsersService",
      "open class GliderUsersService : EquinoxUsersService<T, R> ",
      "com.tecknobit.glider.services.users.services.GliderUsersService"
    ]
  },
  {
    "name": "open class Launcher",
    "description": "com.tecknobit.glider.Launcher",
    "location": "backend/com.tecknobit.glider/-launcher/index.html",
    "searchKeys": [
      "Launcher",
      "open class Launcher",
      "com.tecknobit.glider.Launcher"
    ]
  },
  {
    "name": "open class Password : EquinoxItem",
    "description": "com.tecknobit.glider.services.passwords.entities.Password",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password/index.html",
    "searchKeys": [
      "Password",
      "open class Password : EquinoxItem",
      "com.tecknobit.glider.services.passwords.entities.Password"
    ]
  },
  {
    "name": "open class PasswordConfiguration : EquinoxItem",
    "description": "com.tecknobit.glider.services.passwords.entities.PasswordConfiguration",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password-configuration/index.html",
    "searchKeys": [
      "PasswordConfiguration",
      "open class PasswordConfiguration : EquinoxItem",
      "com.tecknobit.glider.services.passwords.entities.PasswordConfiguration"
    ]
  },
  {
    "name": "open class PasswordEvent : EquinoxItem",
    "description": "com.tecknobit.glider.services.passwords.entities.PasswordEvent",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password-event/index.html",
    "searchKeys": [
      "PasswordEvent",
      "open class PasswordEvent : EquinoxItem",
      "com.tecknobit.glider.services.passwords.entities.PasswordEvent"
    ]
  },
  {
    "name": "open class PasswordEventsService",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordEventsService",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-password-events-service/index.html",
    "searchKeys": [
      "PasswordEventsService",
      "open class PasswordEventsService",
      "com.tecknobit.glider.services.passwords.services.PasswordEventsService"
    ]
  },
  {
    "name": "open class PasswordGenerator",
    "description": "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator",
    "location": "backend/com.tecknobit.glider.services.passwords.helpers/-password-generator/index.html",
    "searchKeys": [
      "PasswordGenerator",
      "open class PasswordGenerator",
      "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator"
    ]
  },
  {
    "name": "open class PasswordMask",
    "description": "com.tecknobit.glider.services.passwords.dtos.PasswordMask",
    "location": "backend/com.tecknobit.glider.services.passwords.dtos/-password-mask/index.html",
    "searchKeys": [
      "PasswordMask",
      "open class PasswordMask",
      "com.tecknobit.glider.services.passwords.dtos.PasswordMask"
    ]
  },
  {
    "name": "open class PasswordsController : DefaultGliderController",
    "description": "com.tecknobit.glider.services.passwords.controller.PasswordsController",
    "location": "backend/com.tecknobit.glider.services.passwords.controller/-passwords-controller/index.html",
    "searchKeys": [
      "PasswordsController",
      "open class PasswordsController : DefaultGliderController",
      "com.tecknobit.glider.services.passwords.controller.PasswordsController"
    ]
  },
  {
    "name": "open class PasswordsService",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordsService",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-passwords-service/index.html",
    "searchKeys": [
      "PasswordsService",
      "open class PasswordsService",
      "com.tecknobit.glider.services.passwords.services.PasswordsService"
    ]
  },
  {
    "name": "open class ServerVault",
    "description": "com.tecknobit.glider.helpers.ServerVault",
    "location": "backend/com.tecknobit.glider.helpers/-server-vault/index.html",
    "searchKeys": [
      "ServerVault",
      "open class ServerVault",
      "com.tecknobit.glider.helpers.ServerVault"
    ]
  },
  {
    "name": "open fun <T> getDevices(userId: String, token: String, deviceId: String, page: Int, pageSize: Int): T",
    "description": "com.tecknobit.glider.services.users.controller.GliderUsersController.getDevices",
    "location": "backend/com.tecknobit.glider.services.users.controller/-glider-users-controller/get-devices.html",
    "searchKeys": [
      "getDevices",
      "open fun <T> getDevices(userId: String, token: String, deviceId: String, page: Int, pageSize: Int): T",
      "com.tecknobit.glider.services.users.controller.GliderUsersController.getDevices"
    ]
  },
  {
    "name": "open fun <T> getKeychain(userId: String, token: String, deviceId: String, page: Int, pageSize: Int, keywords: Set<String>, types: Set<String>): T",
    "description": "com.tecknobit.glider.services.passwords.controller.PasswordsController.getKeychain",
    "location": "backend/com.tecknobit.glider.services.passwords.controller/-passwords-controller/get-keychain.html",
    "searchKeys": [
      "getKeychain",
      "open fun <T> getKeychain(userId: String, token: String, deviceId: String, page: Int, pageSize: Int, keywords: Set<String>, types: Set<String>): T",
      "com.tecknobit.glider.services.passwords.controller.PasswordsController.getKeychain"
    ]
  },
  {
    "name": "open fun <T> getPassword(userId: String, token: String, deviceId: String, passwordId: String): T",
    "description": "com.tecknobit.glider.services.passwords.controller.PasswordsController.getPassword",
    "location": "backend/com.tecknobit.glider.services.passwords.controller/-passwords-controller/get-password.html",
    "searchKeys": [
      "getPassword",
      "open fun <T> getPassword(userId: String, token: String, deviceId: String, passwordId: String): T",
      "com.tecknobit.glider.services.passwords.controller.PasswordsController.getPassword"
    ]
  },
  {
    "name": "open fun changeProfilePic(id: String, token: String, profilePic: MultipartFile): String",
    "description": "com.tecknobit.glider.services.users.controller.GliderUsersController.changeProfilePic",
    "location": "backend/com.tecknobit.glider.services.users.controller/-glider-users-controller/change-profile-pic.html",
    "searchKeys": [
      "changeProfilePic",
      "open fun changeProfilePic(id: String, token: String, profilePic: MultipartFile): String",
      "com.tecknobit.glider.services.users.controller.GliderUsersController.changeProfilePic"
    ]
  },
  {
    "name": "open fun corsFilter(): FilterRegistrationBean",
    "description": "com.tecknobit.glider.configuration.CORSAdvice.corsFilter",
    "location": "backend/com.tecknobit.glider.configuration/-c-o-r-s-advice/cors-filter.html",
    "searchKeys": [
      "corsFilter",
      "open fun corsFilter(): FilterRegistrationBean",
      "com.tecknobit.glider.configuration.CORSAdvice.corsFilter"
    ]
  },
  {
    "name": "open fun createUserPrivateKey(token: String)",
    "description": "com.tecknobit.glider.helpers.ServerVault.createUserPrivateKey",
    "location": "backend/com.tecknobit.glider.helpers/-server-vault/create-user-private-key.html",
    "searchKeys": [
      "createUserPrivateKey",
      "open fun createUserPrivateKey(token: String)",
      "com.tecknobit.glider.helpers.ServerVault.createUserPrivateKey"
    ]
  },
  {
    "name": "open fun decryptPassword(token: String, password: Password)",
    "description": "com.tecknobit.glider.helpers.ServerVault.decryptPassword",
    "location": "backend/com.tecknobit.glider.helpers/-server-vault/decrypt-password.html",
    "searchKeys": [
      "decryptPassword",
      "open fun decryptPassword(token: String, password: Password)",
      "com.tecknobit.glider.helpers.ServerVault.decryptPassword"
    ]
  },
  {
    "name": "open fun decryptPasswords(token: String, passwords: List<Password>)",
    "description": "com.tecknobit.glider.helpers.ServerVault.decryptPasswords",
    "location": "backend/com.tecknobit.glider.helpers/-server-vault/decrypt-passwords.html",
    "searchKeys": [
      "decryptPasswords",
      "open fun decryptPasswords(token: String, passwords: List<Password>)",
      "com.tecknobit.glider.helpers.ServerVault.decryptPasswords"
    ]
  },
  {
    "name": "open fun deleteDeviceIfNotReferenced(device: ConnectedDevice)",
    "description": "com.tecknobit.glider.services.users.services.DevicesService.deleteDeviceIfNotReferenced",
    "location": "backend/com.tecknobit.glider.services.users.services/-devices-service/delete-device-if-not-referenced.html",
    "searchKeys": [
      "deleteDeviceIfNotReferenced",
      "open fun deleteDeviceIfNotReferenced(device: ConnectedDevice)",
      "com.tecknobit.glider.services.users.services.DevicesService.deleteDeviceIfNotReferenced"
    ]
  },
  {
    "name": "open fun deleteDeviceIfNotReferenced(deviceId: String)",
    "description": "com.tecknobit.glider.services.users.services.DevicesService.deleteDeviceIfNotReferenced",
    "location": "backend/com.tecknobit.glider.services.users.services/-devices-service/delete-device-if-not-referenced.html",
    "searchKeys": [
      "deleteDeviceIfNotReferenced",
      "open fun deleteDeviceIfNotReferenced(deviceId: String)",
      "com.tecknobit.glider.services.users.services.DevicesService.deleteDeviceIfNotReferenced"
    ]
  },
  {
    "name": "open fun deleteLockBox(token: String): Boolean",
    "description": "com.tecknobit.glider.helpers.ServerVault.deleteLockBox",
    "location": "backend/com.tecknobit.glider.helpers/-server-vault/delete-lock-box.html",
    "searchKeys": [
      "deleteLockBox",
      "open fun deleteLockBox(token: String): Boolean",
      "com.tecknobit.glider.helpers.ServerVault.deleteLockBox"
    ]
  },
  {
    "name": "open fun deletePassword(passwordId: String)",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordsService.deletePassword",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-passwords-service/delete-password.html",
    "searchKeys": [
      "deletePassword",
      "open fun deletePassword(passwordId: String)",
      "com.tecknobit.glider.services.passwords.services.PasswordsService.deletePassword"
    ]
  },
  {
    "name": "open fun deletePassword(userId: String, token: String, deviceId: String, passwordId: String): String",
    "description": "com.tecknobit.glider.services.passwords.controller.PasswordsController.deletePassword",
    "location": "backend/com.tecknobit.glider.services.passwords.controller/-passwords-controller/delete-password.html",
    "searchKeys": [
      "deletePassword",
      "open fun deletePassword(userId: String, token: String, deviceId: String, passwordId: String): String",
      "com.tecknobit.glider.services.passwords.controller.PasswordsController.deletePassword"
    ]
  },
  {
    "name": "open fun deleteUser(id: String)",
    "description": "com.tecknobit.glider.services.users.services.GliderUsersService.deleteUser",
    "location": "backend/com.tecknobit.glider.services.users.services/-glider-users-service/delete-user.html",
    "searchKeys": [
      "deleteUser",
      "open fun deleteUser(id: String)",
      "com.tecknobit.glider.services.users.services.GliderUsersService.deleteUser"
    ]
  },
  {
    "name": "open fun deviceBelongsToMe(deviceId: String): Boolean",
    "description": "com.tecknobit.glider.services.users.entities.GliderUser.deviceBelongsToMe",
    "location": "backend/com.tecknobit.glider.services.users.entities/-glider-user/device-belongs-to-me.html",
    "searchKeys": [
      "deviceBelongsToMe",
      "open fun deviceBelongsToMe(deviceId: String): Boolean",
      "com.tecknobit.glider.services.users.entities.GliderUser.deviceBelongsToMe"
    ]
  },
  {
    "name": "open fun disconnectDevice(userId: String, deviceId: String)",
    "description": "com.tecknobit.glider.services.users.services.DevicesService.disconnectDevice",
    "location": "backend/com.tecknobit.glider.services.users.services/-devices-service/disconnect-device.html",
    "searchKeys": [
      "disconnectDevice",
      "open fun disconnectDevice(userId: String, deviceId: String)",
      "com.tecknobit.glider.services.users.services.DevicesService.disconnectDevice"
    ]
  },
  {
    "name": "open fun disconnectDevice(userId: String, deviceId: String)",
    "description": "com.tecknobit.glider.services.users.services.GliderUsersService.disconnectDevice",
    "location": "backend/com.tecknobit.glider.services.users.services/-glider-users-service/disconnect-device.html",
    "searchKeys": [
      "disconnectDevice",
      "open fun disconnectDevice(userId: String, deviceId: String)",
      "com.tecknobit.glider.services.users.services.GliderUsersService.disconnectDevice"
    ]
  },
  {
    "name": "open fun disconnectDevice(userId: String, token: String, deviceId: String, payload: Map<String, String>): String",
    "description": "com.tecknobit.glider.services.users.controller.GliderUsersController.disconnectDevice",
    "location": "backend/com.tecknobit.glider.services.users.controller/-glider-users-controller/disconnect-device.html",
    "searchKeys": [
      "disconnectDevice",
      "open fun disconnectDevice(userId: String, token: String, deviceId: String, payload: Map<String, String>): String",
      "com.tecknobit.glider.services.users.controller.GliderUsersController.disconnectDevice"
    ]
  },
  {
    "name": "open fun editPassword(token: String, passwordId: String, tail: String, scopes: String, password: String)",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordsService.editPassword",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-passwords-service/edit-password.html",
    "searchKeys": [
      "editPassword",
      "open fun editPassword(token: String, passwordId: String, tail: String, scopes: String, password: String)",
      "com.tecknobit.glider.services.passwords.services.PasswordsService.editPassword"
    ]
  },
  {
    "name": "open fun editPassword(userId: String, token: String, deviceId: String, passwordId: String, payload: Map<String, Any>): String",
    "description": "com.tecknobit.glider.services.passwords.controller.PasswordsController.editPassword",
    "location": "backend/com.tecknobit.glider.services.passwords.controller/-passwords-controller/edit-password.html",
    "searchKeys": [
      "editPassword",
      "open fun editPassword(userId: String, token: String, deviceId: String, passwordId: String, payload: Map<String, Any>): String",
      "com.tecknobit.glider.services.passwords.controller.PasswordsController.editPassword"
    ]
  },
  {
    "name": "open fun encryptPassword(token: String, password: String): String",
    "description": "com.tecknobit.glider.helpers.ServerVault.encryptPassword",
    "location": "backend/com.tecknobit.glider.helpers/-server-vault/encrypt-password.html",
    "searchKeys": [
      "encryptPassword",
      "open fun encryptPassword(token: String, password: String): String",
      "com.tecknobit.glider.helpers.ServerVault.encryptPassword"
    ]
  },
  {
    "name": "open fun encryptPasswordData(token: String, tail: String, password: String, scopes: String): Triple<String, String, String>",
    "description": "com.tecknobit.glider.helpers.ServerVault.encryptPasswordData",
    "location": "backend/com.tecknobit.glider.helpers/-server-vault/encrypt-password-data.html",
    "searchKeys": [
      "encryptPasswordData",
      "open fun encryptPasswordData(token: String, tail: String, password: String, scopes: String): Triple<String, String, String>",
      "com.tecknobit.glider.helpers.ServerVault.encryptPasswordData"
    ]
  },
  {
    "name": "open fun encryptPasswordData(token: String, tail: String, scopes: String): Pair<String, String>",
    "description": "com.tecknobit.glider.helpers.ServerVault.encryptPasswordData",
    "location": "backend/com.tecknobit.glider.helpers/-server-vault/encrypt-password-data.html",
    "searchKeys": [
      "encryptPasswordData",
      "open fun encryptPasswordData(token: String, tail: String, scopes: String): Pair<String, String>",
      "com.tecknobit.glider.helpers.ServerVault.encryptPasswordData"
    ]
  },
  {
    "name": "open fun generatePassword(configuration: PasswordConfiguration): String",
    "description": "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.generatePassword",
    "location": "backend/com.tecknobit.glider.services.passwords.helpers/-password-generator/generate-password.html",
    "searchKeys": [
      "generatePassword",
      "open fun generatePassword(configuration: PasswordConfiguration): String",
      "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.generatePassword"
    ]
  },
  {
    "name": "open fun generatePassword(length: Int, includeNumbers: Boolean, includeUppercaseLetters: Boolean, includeSpecialCharacters: Boolean): String",
    "description": "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.generatePassword",
    "location": "backend/com.tecknobit.glider.services.passwords.helpers/-password-generator/generate-password.html",
    "searchKeys": [
      "generatePassword",
      "open fun generatePassword(length: Int, includeNumbers: Boolean, includeUppercaseLetters: Boolean, includeSpecialCharacters: Boolean): String",
      "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.generatePassword"
    ]
  },
  {
    "name": "open fun generatePassword(user: GliderUser, token: String, tail: String, scopes: String, length: Int, hResponse: JsonHelper): String",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordsService.generatePassword",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-passwords-service/generate-password.html",
    "searchKeys": [
      "generatePassword",
      "open fun generatePassword(user: GliderUser, token: String, tail: String, scopes: String, length: Int, hResponse: JsonHelper): String",
      "com.tecknobit.glider.services.passwords.services.PasswordsService.generatePassword"
    ]
  },
  {
    "name": "open fun generatePassword(userId: String, token: String, deviceId: String, payload: Map<String, Any>): String",
    "description": "com.tecknobit.glider.services.passwords.controller.PasswordsController.generatePassword",
    "location": "backend/com.tecknobit.glider.services.passwords.controller/-passwords-controller/generate-password.html",
    "searchKeys": [
      "generatePassword",
      "open fun generatePassword(userId: String, token: String, deviceId: String, payload: Map<String, Any>): String",
      "com.tecknobit.glider.services.passwords.controller.PasswordsController.generatePassword"
    ]
  },
  {
    "name": "open fun getDevices(): List<ConnectedDevice>",
    "description": "com.tecknobit.glider.services.users.entities.GliderUser.getDevices",
    "location": "backend/com.tecknobit.glider.services.users.entities/-glider-user/get-devices.html",
    "searchKeys": [
      "getDevices",
      "open fun getDevices(): List<ConnectedDevice>",
      "com.tecknobit.glider.services.users.entities.GliderUser.getDevices"
    ]
  },
  {
    "name": "open fun getDevices(page: Int, pageSize: Int, userId: String): PaginatedResponse<ConnectedDevice>",
    "description": "com.tecknobit.glider.services.users.services.DevicesService.getDevices",
    "location": "backend/com.tecknobit.glider.services.users.services/-devices-service/get-devices.html",
    "searchKeys": [
      "getDevices",
      "open fun getDevices(page: Int, pageSize: Int, userId: String): PaginatedResponse<ConnectedDevice>",
      "com.tecknobit.glider.services.users.services.DevicesService.getDevices"
    ]
  },
  {
    "name": "open fun getDynamicAccountData(id: String, token: String): String",
    "description": "com.tecknobit.glider.services.users.controller.GliderUsersController.getDynamicAccountData",
    "location": "backend/com.tecknobit.glider.services.users.controller/-glider-users-controller/get-dynamic-account-data.html",
    "searchKeys": [
      "getDynamicAccountData",
      "open fun getDynamicAccountData(id: String, token: String): String",
      "com.tecknobit.glider.services.users.controller.GliderUsersController.getDynamicAccountData"
    ]
  },
  {
    "name": "open fun getDynamicAccountData(id: String, token: String, deviceId: String): String",
    "description": "com.tecknobit.glider.services.users.controller.GliderUsersController.getDynamicAccountData",
    "location": "backend/com.tecknobit.glider.services.users.controller/-glider-users-controller/get-dynamic-account-data.html",
    "searchKeys": [
      "getDynamicAccountData",
      "open fun getDynamicAccountData(id: String, token: String, deviceId: String): String",
      "com.tecknobit.glider.services.users.controller.GliderUsersController.getDynamicAccountData"
    ]
  },
  {
    "name": "open fun getDynamicAccountData(userId: String): JSONObject",
    "description": "com.tecknobit.glider.services.users.services.GliderUsersService.getDynamicAccountData",
    "location": "backend/com.tecknobit.glider.services.users.services/-glider-users-service/get-dynamic-account-data.html",
    "searchKeys": [
      "getDynamicAccountData",
      "open fun getDynamicAccountData(userId: String): JSONObject",
      "com.tecknobit.glider.services.users.services.GliderUsersService.getDynamicAccountData"
    ]
  },
  {
    "name": "open fun getDynamicAccountData(userId: String, deviceId: String): JSONObject",
    "description": "com.tecknobit.glider.services.users.services.GliderUsersService.getDynamicAccountData",
    "location": "backend/com.tecknobit.glider.services.users.services/-glider-users-service/get-dynamic-account-data.html",
    "searchKeys": [
      "getDynamicAccountData",
      "open fun getDynamicAccountData(userId: String, deviceId: String): JSONObject",
      "com.tecknobit.glider.services.users.services.GliderUsersService.getDynamicAccountData"
    ]
  },
  {
    "name": "open fun getInstance(): PasswordGenerator",
    "description": "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.getInstance",
    "location": "backend/com.tecknobit.glider.services.passwords.helpers/-password-generator/get-instance.html",
    "searchKeys": [
      "getInstance",
      "open fun getInstance(): PasswordGenerator",
      "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.getInstance"
    ]
  },
  {
    "name": "open fun getInstance(): ServerVault",
    "description": "com.tecknobit.glider.helpers.ServerVault.getInstance",
    "location": "backend/com.tecknobit.glider.helpers/-server-vault/get-instance.html",
    "searchKeys": [
      "getInstance",
      "open fun getInstance(): ServerVault",
      "com.tecknobit.glider.helpers.ServerVault.getInstance"
    ]
  },
  {
    "name": "open fun getKeychain(userId: String, token: String, page: Int, pageSize: Int, keywords: Set<String>, types: Set<String>): PaginatedResponse<Password>",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordsService.getKeychain",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-passwords-service/get-keychain.html",
    "searchKeys": [
      "getKeychain",
      "open fun getKeychain(userId: String, token: String, page: Int, pageSize: Int, keywords: Set<String>, types: Set<String>): PaginatedResponse<Password>",
      "com.tecknobit.glider.services.passwords.services.PasswordsService.getKeychain"
    ]
  },
  {
    "name": "open fun getPagedDevices(page: Int, pageSize: Int, userId: String): PaginatedResponse<ConnectedDevice>",
    "description": "com.tecknobit.glider.services.users.services.GliderUsersService.getPagedDevices",
    "location": "backend/com.tecknobit.glider.services.users.services/-glider-users-service/get-paged-devices.html",
    "searchKeys": [
      "getPagedDevices",
      "open fun getPagedDevices(page: Int, pageSize: Int, userId: String): PaginatedResponse<ConnectedDevice>",
      "com.tecknobit.glider.services.users.services.GliderUsersService.getPagedDevices"
    ]
  },
  {
    "name": "open fun getPassword(token: String, passwordId: String): PasswordMask",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordsService.getPassword",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-passwords-service/get-password.html",
    "searchKeys": [
      "getPassword",
      "open fun getPassword(token: String, passwordId: String): PasswordMask",
      "com.tecknobit.glider.services.passwords.services.PasswordsService.getPassword"
    ]
  },
  {
    "name": "open fun includeNumbers(): Boolean",
    "description": "com.tecknobit.glider.services.passwords.entities.PasswordConfiguration.includeNumbers",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password-configuration/include-numbers.html",
    "searchKeys": [
      "includeNumbers",
      "open fun includeNumbers(): Boolean",
      "com.tecknobit.glider.services.passwords.entities.PasswordConfiguration.includeNumbers"
    ]
  },
  {
    "name": "open fun includeSpecialCharacters(): Boolean",
    "description": "com.tecknobit.glider.services.passwords.entities.PasswordConfiguration.includeSpecialCharacters",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password-configuration/include-special-characters.html",
    "searchKeys": [
      "includeSpecialCharacters",
      "open fun includeSpecialCharacters(): Boolean",
      "com.tecknobit.glider.services.passwords.entities.PasswordConfiguration.includeSpecialCharacters"
    ]
  },
  {
    "name": "open fun includeUppercaseLetters(): Boolean",
    "description": "com.tecknobit.glider.services.passwords.entities.PasswordConfiguration.includeUppercaseLetters",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password-configuration/include-uppercase-letters.html",
    "searchKeys": [
      "includeUppercaseLetters",
      "open fun includeUppercaseLetters(): Boolean",
      "com.tecknobit.glider.services.passwords.entities.PasswordConfiguration.includeUppercaseLetters"
    ]
  },
  {
    "name": "open fun insertPassword(user: GliderUser, token: String, tail: String, scopes: String, password: String)",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordsService.insertPassword",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-passwords-service/insert-password.html",
    "searchKeys": [
      "insertPassword",
      "open fun insertPassword(user: GliderUser, token: String, tail: String, scopes: String, password: String)",
      "com.tecknobit.glider.services.passwords.services.PasswordsService.insertPassword"
    ]
  },
  {
    "name": "open fun insertPassword(userId: String, token: String, deviceId: String, payload: Map<String, Any>): String",
    "description": "com.tecknobit.glider.services.passwords.controller.PasswordsController.insertPassword",
    "location": "backend/com.tecknobit.glider.services.passwords.controller/-passwords-controller/insert-password.html",
    "searchKeys": [
      "insertPassword",
      "open fun insertPassword(userId: String, token: String, deviceId: String, payload: Map<String, Any>): String",
      "com.tecknobit.glider.services.passwords.controller.PasswordsController.insertPassword"
    ]
  },
  {
    "name": "open fun main(args: Array<String>)",
    "description": "com.tecknobit.glider.Launcher.main",
    "location": "backend/com.tecknobit.glider/-launcher/main.html",
    "searchKeys": [
      "main",
      "open fun main(args: Array<String>)",
      "com.tecknobit.glider.Launcher.main"
    ]
  },
  {
    "name": "open fun notifyCopiedPassword(passwordId: String)",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordsService.notifyCopiedPassword",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-passwords-service/notify-copied-password.html",
    "searchKeys": [
      "notifyCopiedPassword",
      "open fun notifyCopiedPassword(passwordId: String)",
      "com.tecknobit.glider.services.passwords.services.PasswordsService.notifyCopiedPassword"
    ]
  },
  {
    "name": "open fun notifyCopiedPassword(userId: String, token: String, deviceId: String, passwordId: String): String",
    "description": "com.tecknobit.glider.services.passwords.controller.PasswordsController.notifyCopiedPassword",
    "location": "backend/com.tecknobit.glider.services.passwords.controller/-passwords-controller/notify-copied-password.html",
    "searchKeys": [
      "notifyCopiedPassword",
      "open fun notifyCopiedPassword(userId: String, token: String, deviceId: String, passwordId: String): String",
      "com.tecknobit.glider.services.passwords.controller.PasswordsController.notifyCopiedPassword"
    ]
  },
  {
    "name": "open fun passwordBelongsToMe(passwordId: String): Boolean",
    "description": "com.tecknobit.glider.services.users.entities.GliderUser.passwordBelongsToMe",
    "location": "backend/com.tecknobit.glider.services.users.entities/-glider-user/password-belongs-to-me.html",
    "searchKeys": [
      "passwordBelongsToMe",
      "open fun passwordBelongsToMe(passwordId: String): Boolean",
      "com.tecknobit.glider.services.users.entities.GliderUser.passwordBelongsToMe"
    ]
  },
  {
    "name": "open fun refreshGeneratedPassword(token: String, passwordId: String): String",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordsService.refreshGeneratedPassword",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-passwords-service/refresh-generated-password.html",
    "searchKeys": [
      "refreshGeneratedPassword",
      "open fun refreshGeneratedPassword(token: String, passwordId: String): String",
      "com.tecknobit.glider.services.passwords.services.PasswordsService.refreshGeneratedPassword"
    ]
  },
  {
    "name": "open fun refreshGeneratedPassword(userId: String, token: String, deviceId: String, passwordId: String): String",
    "description": "com.tecknobit.glider.services.passwords.controller.PasswordsController.refreshGeneratedPassword",
    "location": "backend/com.tecknobit.glider.services.passwords.controller/-passwords-controller/refresh-generated-password.html",
    "searchKeys": [
      "refreshGeneratedPassword",
      "open fun refreshGeneratedPassword(userId: String, token: String, deviceId: String, passwordId: String): String",
      "com.tecknobit.glider.services.passwords.controller.PasswordsController.refreshGeneratedPassword"
    ]
  },
  {
    "name": "open fun registerCopiedPasswordEvent(password: Password)",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordEventsService.registerCopiedPasswordEvent",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-password-events-service/register-copied-password-event.html",
    "searchKeys": [
      "registerCopiedPasswordEvent",
      "open fun registerCopiedPasswordEvent(password: Password)",
      "com.tecknobit.glider.services.passwords.services.PasswordEventsService.registerCopiedPasswordEvent"
    ]
  },
  {
    "name": "open fun registerEditPasswordEvent(password: Password)",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordEventsService.registerEditPasswordEvent",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-password-events-service/register-edit-password-event.html",
    "searchKeys": [
      "registerEditPasswordEvent",
      "open fun registerEditPasswordEvent(password: Password)",
      "com.tecknobit.glider.services.passwords.services.PasswordEventsService.registerEditPasswordEvent"
    ]
  },
  {
    "name": "open fun registerGeneratedPasswordEvent(password: Password, generationDate: Long)",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordEventsService.registerGeneratedPasswordEvent",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-password-events-service/register-generated-password-event.html",
    "searchKeys": [
      "registerGeneratedPasswordEvent",
      "open fun registerGeneratedPasswordEvent(password: Password, generationDate: Long)",
      "com.tecknobit.glider.services.passwords.services.PasswordEventsService.registerGeneratedPasswordEvent"
    ]
  },
  {
    "name": "open fun registerInsertedPasswordEvent(password: Password, insertionDate: Long)",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordEventsService.registerInsertedPasswordEvent",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-password-events-service/register-inserted-password-event.html",
    "searchKeys": [
      "registerInsertedPasswordEvent",
      "open fun registerInsertedPasswordEvent(password: Password, insertionDate: Long)",
      "com.tecknobit.glider.services.passwords.services.PasswordEventsService.registerInsertedPasswordEvent"
    ]
  },
  {
    "name": "open fun registerRefreshedPasswordEvent(password: Password)",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordEventsService.registerRefreshedPasswordEvent",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-password-events-service/register-refreshed-password-event.html",
    "searchKeys": [
      "registerRefreshedPasswordEvent",
      "open fun registerRefreshedPasswordEvent(password: Password)",
      "com.tecknobit.glider.services.passwords.services.PasswordEventsService.registerRefreshedPasswordEvent"
    ]
  },
  {
    "name": "open fun scopesMatch(keywords: Set<String>): Boolean",
    "description": "com.tecknobit.glider.services.passwords.entities.Password.scopesMatch",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password/scopes-match.html",
    "searchKeys": [
      "scopesMatch",
      "open fun scopesMatch(keywords: Set<String>): Boolean",
      "com.tecknobit.glider.services.passwords.entities.Password.scopesMatch"
    ]
  },
  {
    "name": "open fun setDecryptedData(decryptedData: Triple<String, String, String>)",
    "description": "com.tecknobit.glider.services.passwords.entities.Password.setDecryptedData",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password/set-decrypted-data.html",
    "searchKeys": [
      "setDecryptedData",
      "open fun setDecryptedData(decryptedData: Triple<String, String, String>)",
      "com.tecknobit.glider.services.passwords.entities.Password.setDecryptedData"
    ]
  },
  {
    "name": "open fun signInUser(email: String, password: String, custom: Array<Any>): GliderUser",
    "description": "com.tecknobit.glider.services.users.services.GliderUsersService.signInUser",
    "location": "backend/com.tecknobit.glider.services.users.services/-glider-users-service/sign-in-user.html",
    "searchKeys": [
      "signInUser",
      "open fun signInUser(email: String, password: String, custom: Array<Any>): GliderUser",
      "com.tecknobit.glider.services.users.services.GliderUsersService.signInUser"
    ]
  },
  {
    "name": "open fun signUpUser(id: String, token: String, name: String, surname: String, email: String, password: String, language: String, custom: Array<Any>)",
    "description": "com.tecknobit.glider.services.users.services.GliderUsersService.signUpUser",
    "location": "backend/com.tecknobit.glider.services.users.services/-glider-users-service/sign-up-user.html",
    "searchKeys": [
      "signUpUser",
      "open fun signUpUser(id: String, token: String, name: String, surname: String, email: String, password: String, language: String, custom: Array<Any>)",
      "com.tecknobit.glider.services.users.services.GliderUsersService.signUpUser"
    ]
  },
  {
    "name": "open fun storeDevice(userId: String, rawDevice: Array<Any>)",
    "description": "com.tecknobit.glider.services.users.services.DevicesService.storeDevice",
    "location": "backend/com.tecknobit.glider.services.users.services/-devices-service/store-device.html",
    "searchKeys": [
      "storeDevice",
      "open fun storeDevice(userId: String, rawDevice: Array<Any>)",
      "com.tecknobit.glider.services.users.services.DevicesService.storeDevice"
    ]
  },
  {
    "name": "open fun updateLastLogin(userId: String, deviceId: String)",
    "description": "com.tecknobit.glider.services.users.services.DevicesService.updateLastLogin",
    "location": "backend/com.tecknobit.glider.services.users.services/-devices-service/update-last-login.html",
    "searchKeys": [
      "updateLastLogin",
      "open fun updateLastLogin(userId: String, deviceId: String)",
      "com.tecknobit.glider.services.users.services.DevicesService.updateLastLogin"
    ]
  },
  {
    "name": "open val password: String",
    "description": "com.tecknobit.glider.services.passwords.entities.Password.password",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password/password.html",
    "searchKeys": [
      "password",
      "open val password: String",
      "com.tecknobit.glider.services.passwords.entities.Password.password"
    ]
  },
  {
    "name": "open val scopes: String",
    "description": "com.tecknobit.glider.services.passwords.entities.Password.scopes",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password/scopes.html",
    "searchKeys": [
      "scopes",
      "open val scopes: String",
      "com.tecknobit.glider.services.passwords.entities.Password.scopes"
    ]
  },
  {
    "name": "open val tail: String",
    "description": "com.tecknobit.glider.services.passwords.entities.Password.tail",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password/tail.html",
    "searchKeys": [
      "tail",
      "open val tail: String",
      "com.tecknobit.glider.services.passwords.entities.Password.tail"
    ]
  },
  {
    "name": "open var lastLogin: Long",
    "description": "com.tecknobit.glider.services.users.entities.ConnectedDevice.lastLogin",
    "location": "backend/com.tecknobit.glider.services.users.entities/-connected-device/last-login.html",
    "searchKeys": [
      "lastLogin",
      "open var lastLogin: Long",
      "com.tecknobit.glider.services.users.entities.ConnectedDevice.lastLogin"
    ]
  },
  {
    "name": "open var password: Password",
    "description": "com.tecknobit.glider.services.passwords.entities.PasswordConfiguration.password",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password-configuration/password.html",
    "searchKeys": [
      "password",
      "open var password: Password",
      "com.tecknobit.glider.services.passwords.entities.PasswordConfiguration.password"
    ]
  },
  {
    "name": "private constructor()",
    "description": "com.tecknobit.glider.helpers.ServerVault.ServerVault",
    "location": "backend/com.tecknobit.glider.helpers/-server-vault/-server-vault.html",
    "searchKeys": [
      "ServerVault",
      "private constructor()",
      "com.tecknobit.glider.helpers.ServerVault.ServerVault"
    ]
  },
  {
    "name": "private constructor()",
    "description": "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.PasswordGenerator",
    "location": "backend/com.tecknobit.glider.services.passwords.helpers/-password-generator/-password-generator.html",
    "searchKeys": [
      "PasswordGenerator",
      "private constructor()",
      "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.PasswordGenerator"
    ]
  },
  {
    "name": "private open fun computeLockBoxPathName(token: String): String",
    "description": "com.tecknobit.glider.helpers.ServerVault.computeLockBoxPathName",
    "location": "backend/com.tecknobit.glider.helpers/-server-vault/compute-lock-box-path-name.html",
    "searchKeys": [
      "computeLockBoxPathName",
      "private open fun computeLockBoxPathName(token: String): String",
      "com.tecknobit.glider.helpers.ServerVault.computeLockBoxPathName"
    ]
  },
  {
    "name": "private open fun constraintsValid(character: Char, includeNumbers: Boolean, includeUppercaseLetters: Boolean, includeSpecialCharacters: Boolean): Boolean",
    "description": "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.constraintsValid",
    "location": "backend/com.tecknobit.glider.services.passwords.helpers/-password-generator/constraints-valid.html",
    "searchKeys": [
      "constraintsValid",
      "private open fun constraintsValid(character: Char, includeNumbers: Boolean, includeUppercaseLetters: Boolean, includeSpecialCharacters: Boolean): Boolean",
      "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.constraintsValid"
    ]
  },
  {
    "name": "private open fun convertToString(rawPassword: ArrayList<Character>): String",
    "description": "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.convertToString",
    "location": "backend/com.tecknobit.glider.services.passwords.helpers/-password-generator/convert-to-string.html",
    "searchKeys": [
      "convertToString",
      "private open fun convertToString(rawPassword: ArrayList<Character>): String",
      "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.convertToString"
    ]
  },
  {
    "name": "private open fun decryptPassword(decipher: AESServerCipher, password: Password, bypassType: Boolean)",
    "description": "com.tecknobit.glider.helpers.ServerVault.decryptPassword",
    "location": "backend/com.tecknobit.glider.helpers/-server-vault/decrypt-password.html",
    "searchKeys": [
      "decryptPassword",
      "private open fun decryptPassword(decipher: AESServerCipher, password: Password, bypassType: Boolean)",
      "com.tecknobit.glider.helpers.ServerVault.decryptPassword"
    ]
  },
  {
    "name": "private open fun editGeneratedPassword(token: String, passwordId: String, tail: String, scopes: String)",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordsService.editGeneratedPassword",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-passwords-service/edit-generated-password.html",
    "searchKeys": [
      "editGeneratedPassword",
      "private open fun editGeneratedPassword(token: String, passwordId: String, tail: String, scopes: String)",
      "com.tecknobit.glider.services.passwords.services.PasswordsService.editGeneratedPassword"
    ]
  },
  {
    "name": "private open fun editInsertedPassword(token: String, passwordId: String, tail: String, scopes: String, password: String)",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordsService.editInsertedPassword",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-passwords-service/edit-inserted-password.html",
    "searchKeys": [
      "editInsertedPassword",
      "private open fun editInsertedPassword(token: String, passwordId: String, tail: String, scopes: String, password: String)",
      "com.tecknobit.glider.services.passwords.services.PasswordsService.editInsertedPassword"
    ]
  },
  {
    "name": "private open fun filterPasswords(passwords: List<Password>, keywords: Set<String>): List<Password>",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordsService.filterPasswords",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-passwords-service/filter-passwords.html",
    "searchKeys": [
      "filterPasswords",
      "private open fun filterPasswords(passwords: List<Password>, keywords: Set<String>): List<Password>",
      "com.tecknobit.glider.services.passwords.services.PasswordsService.filterPasswords"
    ]
  },
  {
    "name": "private open fun findPasswordById(passwordId: String): Password",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordsService.findPasswordById",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-passwords-service/find-password-by-id.html",
    "searchKeys": [
      "findPasswordById",
      "private open fun findPasswordById(passwordId: String): Password",
      "com.tecknobit.glider.services.passwords.services.PasswordsService.findPasswordById"
    ]
  },
  {
    "name": "private open fun getCipherInstance(token: String): AESServerCipher",
    "description": "com.tecknobit.glider.helpers.ServerVault.getCipherInstance",
    "location": "backend/com.tecknobit.glider.helpers/-server-vault/get-cipher-instance.html",
    "searchKeys": [
      "getCipherInstance",
      "private open fun getCipherInstance(token: String): AESServerCipher",
      "com.tecknobit.glider.helpers.ServerVault.getCipherInstance"
    ]
  },
  {
    "name": "private open fun getDigitsValidIndex(secureRandom: SecureRandom): Int",
    "description": "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.getDigitsValidIndex",
    "location": "backend/com.tecknobit.glider.services.passwords.helpers/-password-generator/get-digits-valid-index.html",
    "searchKeys": [
      "getDigitsValidIndex",
      "private open fun getDigitsValidIndex(secureRandom: SecureRandom): Int",
      "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.getDigitsValidIndex"
    ]
  },
  {
    "name": "private open fun getSpecialCharactersValidIndex(secureRandom: SecureRandom): Int",
    "description": "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.getSpecialCharactersValidIndex",
    "location": "backend/com.tecknobit.glider.services.passwords.helpers/-password-generator/get-special-characters-valid-index.html",
    "searchKeys": [
      "getSpecialCharactersValidIndex",
      "private open fun getSpecialCharactersValidIndex(secureRandom: SecureRandom): Int",
      "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.getSpecialCharactersValidIndex"
    ]
  },
  {
    "name": "private open fun getUppercaseLettersValidIndex(secureRandom: SecureRandom): Int",
    "description": "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.getUppercaseLettersValidIndex",
    "location": "backend/com.tecknobit.glider.services.passwords.helpers/-password-generator/get-uppercase-letters-valid-index.html",
    "searchKeys": [
      "getUppercaseLettersValidIndex",
      "private open fun getUppercaseLettersValidIndex(secureRandom: SecureRandom): Int",
      "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.getUppercaseLettersValidIndex"
    ]
  },
  {
    "name": "private open fun guaranteeConstraintCharacters(password: ArrayList<Character>, secureRandom: SecureRandom, includeNumbers: Boolean, includeUppercaseLetters: Boolean, includeSpecialCharacters: Boolean)",
    "description": "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.guaranteeConstraintCharacters",
    "location": "backend/com.tecknobit.glider.services.passwords.helpers/-password-generator/guarantee-constraint-characters.html",
    "searchKeys": [
      "guaranteeConstraintCharacters",
      "private open fun guaranteeConstraintCharacters(password: ArrayList<Character>, secureRandom: SecureRandom, includeNumbers: Boolean, includeUppercaseLetters: Boolean, includeSpecialCharacters: Boolean)",
      "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.guaranteeConstraintCharacters"
    ]
  },
  {
    "name": "private open fun loadPasswordEntity(token: String, tail: String, scopes: String, password: String, currentDate: Long, type: PasswordType, configuration: PasswordConfiguration, user: GliderUser): Password",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordsService.loadPasswordEntity",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-passwords-service/load-password-entity.html",
    "searchKeys": [
      "loadPasswordEntity",
      "private open fun loadPasswordEntity(token: String, tail: String, scopes: String, password: String, currentDate: Long, type: PasswordType, configuration: PasswordConfiguration, user: GliderUser): Password",
      "com.tecknobit.glider.services.passwords.services.PasswordsService.loadPasswordEntity"
    ]
  },
  {
    "name": "private open fun pagePasswords(passwords: List<Password>, page: Int, pageSize: Int): List<Password>",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordsService.pagePasswords",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-passwords-service/page-passwords.html",
    "searchKeys": [
      "pagePasswords",
      "private open fun pagePasswords(passwords: List<Password>, page: Int, pageSize: Int): List<Password>",
      "com.tecknobit.glider.services.passwords.services.PasswordsService.pagePasswords"
    ]
  },
  {
    "name": "private open fun registerPasswordEvent(password: Password, eventDate: Long, type: PasswordEventType)",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordEventsService.registerPasswordEvent",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-password-events-service/register-password-event.html",
    "searchKeys": [
      "registerPasswordEvent",
      "private open fun registerPasswordEvent(password: Password, eventDate: Long, type: PasswordEventType)",
      "com.tecknobit.glider.services.passwords.services.PasswordEventsService.registerPasswordEvent"
    ]
  },
  {
    "name": "private open fun registerPasswordEvent(password: Password, type: PasswordEventType)",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordEventsService.registerPasswordEvent",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-password-events-service/register-password-event.html",
    "searchKeys": [
      "registerPasswordEvent",
      "private open fun registerPasswordEvent(password: Password, type: PasswordEventType)",
      "com.tecknobit.glider.services.passwords.services.PasswordEventsService.registerPasswordEvent"
    ]
  },
  {
    "name": "private open fun retrievePrivateKey(token: String): Pair<String, String>",
    "description": "com.tecknobit.glider.helpers.ServerVault.retrievePrivateKey",
    "location": "backend/com.tecknobit.glider.helpers/-server-vault/retrieve-private-key.html",
    "searchKeys": [
      "retrievePrivateKey",
      "private open fun retrievePrivateKey(token: String): Pair<String, String>",
      "com.tecknobit.glider.helpers.ServerVault.retrievePrivateKey"
    ]
  },
  {
    "name": "private open fun storePrivateKey(token: String, secretKey: String, ivSpec: String)",
    "description": "com.tecknobit.glider.helpers.ServerVault.storePrivateKey",
    "location": "backend/com.tecknobit.glider.helpers/-server-vault/store-private-key.html",
    "searchKeys": [
      "storePrivateKey",
      "private open fun storePrivateKey(token: String, secretKey: String, ivSpec: String)",
      "com.tecknobit.glider.helpers.ServerVault.storePrivateKey"
    ]
  },
  {
    "name": "private open fun tailMatches(keywords: Set<String>, tail: String): Boolean",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordsService.tailMatches",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-passwords-service/tail-matches.html",
    "searchKeys": [
      "tailMatches",
      "private open fun tailMatches(keywords: Set<String>, tail: String): Boolean",
      "com.tecknobit.glider.services.passwords.services.PasswordsService.tailMatches"
    ]
  },
  {
    "name": "private open fun validPasswordRequest(userId: String, token: String, deviceId: String, passwordId: String): Boolean",
    "description": "com.tecknobit.glider.services.passwords.controller.PasswordsController.validPasswordRequest",
    "location": "backend/com.tecknobit.glider.services.passwords.controller/-passwords-controller/valid-password-request.html",
    "searchKeys": [
      "validPasswordRequest",
      "private open fun validPasswordRequest(userId: String, token: String, deviceId: String, passwordId: String): Boolean",
      "com.tecknobit.glider.services.passwords.controller.PasswordsController.validPasswordRequest"
    ]
  },
  {
    "name": "private open fun validateDeviceData(custom: Array<Any>): String",
    "description": "com.tecknobit.glider.services.users.controller.GliderUsersController.validateDeviceData",
    "location": "backend/com.tecknobit.glider.services.users.controller/-glider-users-controller/validate-device-data.html",
    "searchKeys": [
      "validateDeviceData",
      "private open fun validateDeviceData(custom: Array<Any>): String",
      "com.tecknobit.glider.services.users.controller.GliderUsersController.validateDeviceData"
    ]
  },
  {
    "name": "private open var devicesRepository: DevicesRepository",
    "description": "com.tecknobit.glider.services.users.services.DevicesService.devicesRepository",
    "location": "backend/com.tecknobit.glider.services.users.services/-devices-service/devices-repository.html",
    "searchKeys": [
      "devicesRepository",
      "private open var devicesRepository: DevicesRepository",
      "com.tecknobit.glider.services.users.services.DevicesService.devicesRepository"
    ]
  },
  {
    "name": "private open var devicesService: DevicesService",
    "description": "com.tecknobit.glider.services.users.services.GliderUsersService.devicesService",
    "location": "backend/com.tecknobit.glider.services.users.services/-glider-users-service/devices-service.html",
    "searchKeys": [
      "devicesService",
      "private open var devicesService: DevicesService",
      "com.tecknobit.glider.services.users.services.GliderUsersService.devicesService"
    ]
  },
  {
    "name": "private open var eventsRepository: PasswordEventsRepository",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordEventsService.eventsRepository",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-password-events-service/events-repository.html",
    "searchKeys": [
      "eventsRepository",
      "private open var eventsRepository: PasswordEventsRepository",
      "com.tecknobit.glider.services.passwords.services.PasswordEventsService.eventsRepository"
    ]
  },
  {
    "name": "private open var eventsService: PasswordEventsService",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordsService.eventsService",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-passwords-service/events-service.html",
    "searchKeys": [
      "eventsService",
      "private open var eventsService: PasswordEventsService",
      "com.tecknobit.glider.services.passwords.services.PasswordsService.eventsService"
    ]
  },
  {
    "name": "private open var passwordsRepository: PasswordsRepository",
    "description": "com.tecknobit.glider.services.passwords.services.PasswordsService.passwordsRepository",
    "location": "backend/com.tecknobit.glider.services.passwords.services/-passwords-service/passwords-repository.html",
    "searchKeys": [
      "passwordsRepository",
      "private open var passwordsRepository: PasswordsRepository",
      "com.tecknobit.glider.services.passwords.services.PasswordsService.passwordsRepository"
    ]
  },
  {
    "name": "private open var passwordsService: PasswordsService",
    "description": "com.tecknobit.glider.services.passwords.controller.PasswordsController.passwordsService",
    "location": "backend/com.tecknobit.glider.services.passwords.controller/-passwords-controller/passwords-service.html",
    "searchKeys": [
      "passwordsService",
      "private open var passwordsService: PasswordsService",
      "com.tecknobit.glider.services.passwords.controller.PasswordsController.passwordsService"
    ]
  },
  {
    "name": "private open var sessions: List<DeviceUserSession>",
    "description": "com.tecknobit.glider.services.users.entities.ConnectedDevice.sessions",
    "location": "backend/com.tecknobit.glider.services.users.entities/-connected-device/sessions.html",
    "searchKeys": [
      "sessions",
      "private open var sessions: List<DeviceUserSession>",
      "com.tecknobit.glider.services.users.entities.ConnectedDevice.sessions"
    ]
  },
  {
    "name": "private open var user: GliderUser",
    "description": "com.tecknobit.glider.services.users.entities.DeviceUserSession.user",
    "location": "backend/com.tecknobit.glider.services.users.entities/-device-user-session/user.html",
    "searchKeys": [
      "user",
      "private open var user: GliderUser",
      "com.tecknobit.glider.services.users.entities.DeviceUserSession.user"
    ]
  },
  {
    "name": "private val BASE_OFFSET: Int = 26",
    "description": "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.BASE_OFFSET",
    "location": "backend/com.tecknobit.glider.services.passwords.helpers/-password-generator/-b-a-s-e_-o-f-f-s-e-t.html",
    "searchKeys": [
      "BASE_OFFSET",
      "private val BASE_OFFSET: Int = 26",
      "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.BASE_OFFSET"
    ]
  },
  {
    "name": "private val CHARACTERS: Array<Char>",
    "description": "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.CHARACTERS",
    "location": "backend/com.tecknobit.glider.services.passwords.helpers/-password-generator/-c-h-a-r-a-c-t-e-r-s.html",
    "searchKeys": [
      "CHARACTERS",
      "private val CHARACTERS: Array<Char>",
      "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.CHARACTERS"
    ]
  },
  {
    "name": "private val DIGITS: HashSet<Character>",
    "description": "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.DIGITS",
    "location": "backend/com.tecknobit.glider.services.passwords.helpers/-password-generator/-d-i-g-i-t-s.html",
    "searchKeys": [
      "DIGITS",
      "private val DIGITS: HashSet<Character>",
      "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.DIGITS"
    ]
  },
  {
    "name": "private val INVALID_PATHNAME_CHARACTERS_REGEX: String = \"[^a-zA-Z0-9._-]\"",
    "description": "com.tecknobit.glider.helpers.ServerVault.INVALID_PATHNAME_CHARACTERS_REGEX",
    "location": "backend/com.tecknobit.glider.helpers/-server-vault/-i-n-v-a-l-i-d_-p-a-t-h-n-a-m-e_-c-h-a-r-a-c-t-e-r-s_-r-e-g-e-x.html",
    "searchKeys": [
      "INVALID_PATHNAME_CHARACTERS_REGEX",
      "private val INVALID_PATHNAME_CHARACTERS_REGEX: String = \"[^a-zA-Z0-9._-]\"",
      "com.tecknobit.glider.helpers.ServerVault.INVALID_PATHNAME_CHARACTERS_REGEX"
    ]
  },
  {
    "name": "private val INVALID_PATHNAME_CHARACTER_REPLACER: String = \"a\"",
    "description": "com.tecknobit.glider.helpers.ServerVault.INVALID_PATHNAME_CHARACTER_REPLACER",
    "location": "backend/com.tecknobit.glider.helpers/-server-vault/-i-n-v-a-l-i-d_-p-a-t-h-n-a-m-e_-c-h-a-r-a-c-t-e-r_-r-e-p-l-a-c-e-r.html",
    "searchKeys": [
      "INVALID_PATHNAME_CHARACTER_REPLACER",
      "private val INVALID_PATHNAME_CHARACTER_REPLACER: String = \"a\"",
      "com.tecknobit.glider.helpers.ServerVault.INVALID_PATHNAME_CHARACTER_REPLACER"
    ]
  },
  {
    "name": "private val SPECIAL_CHARACTERS: HashSet<Character>",
    "description": "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.SPECIAL_CHARACTERS",
    "location": "backend/com.tecknobit.glider.services.passwords.helpers/-password-generator/-s-p-e-c-i-a-l_-c-h-a-r-a-c-t-e-r-s.html",
    "searchKeys": [
      "SPECIAL_CHARACTERS",
      "private val SPECIAL_CHARACTERS: HashSet<Character>",
      "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.SPECIAL_CHARACTERS"
    ]
  },
  {
    "name": "private val UPPERCASE_LETTERS: HashSet<Character>",
    "description": "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.UPPERCASE_LETTERS",
    "location": "backend/com.tecknobit.glider.services.passwords.helpers/-password-generator/-u-p-p-e-r-c-a-s-e_-l-e-t-t-e-r-s.html",
    "searchKeys": [
      "UPPERCASE_LETTERS",
      "private val UPPERCASE_LETTERS: HashSet<Character>",
      "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.UPPERCASE_LETTERS"
    ]
  },
  {
    "name": "private val VAULT_PATHNAME: String = \"resources/vault/\"",
    "description": "com.tecknobit.glider.helpers.ServerVault.VAULT_PATHNAME",
    "location": "backend/com.tecknobit.glider.helpers/-server-vault/-v-a-u-l-t_-p-a-t-h-n-a-m-e.html",
    "searchKeys": [
      "VAULT_PATHNAME",
      "private val VAULT_PATHNAME: String = \"resources/vault/\"",
      "com.tecknobit.glider.helpers.ServerVault.VAULT_PATHNAME"
    ]
  },
  {
    "name": "private val devices: List<DeviceUserSession>",
    "description": "com.tecknobit.glider.services.users.entities.GliderUser.devices",
    "location": "backend/com.tecknobit.glider.services.users.entities/-glider-user/devices.html",
    "searchKeys": [
      "devices",
      "private val devices: List<DeviceUserSession>",
      "com.tecknobit.glider.services.users.entities.GliderUser.devices"
    ]
  },
  {
    "name": "private val generator: PasswordGenerator",
    "description": "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.generator",
    "location": "backend/com.tecknobit.glider.services.passwords.helpers/-password-generator/generator.html",
    "searchKeys": [
      "generator",
      "private val generator: PasswordGenerator",
      "com.tecknobit.glider.services.passwords.helpers.PasswordGenerator.generator"
    ]
  },
  {
    "name": "private val vault: ServerVault",
    "description": "com.tecknobit.glider.helpers.ServerVault.vault",
    "location": "backend/com.tecknobit.glider.helpers/-server-vault/vault.html",
    "searchKeys": [
      "vault",
      "private val vault: ServerVault",
      "com.tecknobit.glider.helpers.ServerVault.vault"
    ]
  },
  {
    "name": "protected open fun getSignInCustomParams(): Array<Any>",
    "description": "com.tecknobit.glider.services.users.controller.GliderUsersController.getSignInCustomParams",
    "location": "backend/com.tecknobit.glider.services.users.controller/-glider-users-controller/get-sign-in-custom-params.html",
    "searchKeys": [
      "getSignInCustomParams",
      "protected open fun getSignInCustomParams(): Array<Any>",
      "com.tecknobit.glider.services.users.controller.GliderUsersController.getSignInCustomParams"
    ]
  },
  {
    "name": "protected open fun getSignUpCustomParams(): Array<Any>",
    "description": "com.tecknobit.glider.services.users.controller.GliderUsersController.getSignUpCustomParams",
    "location": "backend/com.tecknobit.glider.services.users.controller/-glider-users-controller/get-sign-up-custom-params.html",
    "searchKeys": [
      "getSignUpCustomParams",
      "protected open fun getSignUpCustomParams(): Array<Any>",
      "com.tecknobit.glider.services.users.controller.GliderUsersController.getSignUpCustomParams"
    ]
  },
  {
    "name": "protected open fun validRequester(userId: String, token: String, deviceId: String): Boolean",
    "description": "com.tecknobit.glider.services.shared.controllers.DefaultGliderController.validRequester",
    "location": "backend/com.tecknobit.glider.services.shared.controllers/-default-glider-controller/valid-requester.html",
    "searchKeys": [
      "validRequester",
      "protected open fun validRequester(userId: String, token: String, deviceId: String): Boolean",
      "com.tecknobit.glider.services.shared.controllers.DefaultGliderController.validRequester"
    ]
  },
  {
    "name": "protected open fun validateSignIn(email: String, password: String, language: String, custom: Array<Any>): String",
    "description": "com.tecknobit.glider.services.users.controller.GliderUsersController.validateSignIn",
    "location": "backend/com.tecknobit.glider.services.users.controller/-glider-users-controller/validate-sign-in.html",
    "searchKeys": [
      "validateSignIn",
      "protected open fun validateSignIn(email: String, password: String, language: String, custom: Array<Any>): String",
      "com.tecknobit.glider.services.users.controller.GliderUsersController.validateSignIn"
    ]
  },
  {
    "name": "protected open fun validateSignUp(name: String, surname: String, email: String, password: String, language: String, custom: Array<Any>): String",
    "description": "com.tecknobit.glider.services.users.controller.GliderUsersController.validateSignUp",
    "location": "backend/com.tecknobit.glider.services.users.controller/-glider-users-controller/validate-sign-up.html",
    "searchKeys": [
      "validateSignUp",
      "protected open fun validateSignUp(name: String, surname: String, email: String, password: String, language: String, custom: Array<Any>): String",
      "com.tecknobit.glider.services.users.controller.GliderUsersController.validateSignUp"
    ]
  },
  {
    "name": "val VAULT_FOLDER: String = \"vault\"",
    "description": "com.tecknobit.glider.helpers.ServerVault.VAULT_FOLDER",
    "location": "backend/com.tecknobit.glider.helpers/-server-vault/-v-a-u-l-t_-f-o-l-d-e-r.html",
    "searchKeys": [
      "VAULT_FOLDER",
      "val VAULT_FOLDER: String = \"vault\"",
      "com.tecknobit.glider.helpers.ServerVault.VAULT_FOLDER"
    ]
  },
  {
    "name": "val WRONG_DEVICE_DATA_MESSAGE: String = \"wrong_device_data\"",
    "description": "com.tecknobit.glider.services.users.controller.GliderUsersController.WRONG_DEVICE_DATA_MESSAGE",
    "location": "backend/com.tecknobit.glider.services.users.controller/-glider-users-controller/-w-r-o-n-g_-d-e-v-i-c-e_-d-a-t-a_-m-e-s-s-a-g-e.html",
    "searchKeys": [
      "WRONG_DEVICE_DATA_MESSAGE",
      "val WRONG_DEVICE_DATA_MESSAGE: String = \"wrong_device_data\"",
      "com.tecknobit.glider.services.users.controller.GliderUsersController.WRONG_DEVICE_DATA_MESSAGE"
    ]
  },
  {
    "name": "val WRONG_SCOPES_MESSAGE: String = \"wrong_scopes\"",
    "description": "com.tecknobit.glider.services.passwords.controller.PasswordsController.WRONG_SCOPES_MESSAGE",
    "location": "backend/com.tecknobit.glider.services.passwords.controller/-passwords-controller/-w-r-o-n-g_-s-c-o-p-e-s_-m-e-s-s-a-g-e.html",
    "searchKeys": [
      "WRONG_SCOPES_MESSAGE",
      "val WRONG_SCOPES_MESSAGE: String = \"wrong_scopes\"",
      "com.tecknobit.glider.services.passwords.controller.PasswordsController.WRONG_SCOPES_MESSAGE"
    ]
  },
  {
    "name": "val WRONG_TAIL_MESSAGE: String = \"wrong_tail\"",
    "description": "com.tecknobit.glider.services.passwords.controller.PasswordsController.WRONG_TAIL_MESSAGE",
    "location": "backend/com.tecknobit.glider.services.passwords.controller/-passwords-controller/-w-r-o-n-g_-t-a-i-l_-m-e-s-s-a-g-e.html",
    "searchKeys": [
      "WRONG_TAIL_MESSAGE",
      "val WRONG_TAIL_MESSAGE: String = \"wrong_tail\"",
      "com.tecknobit.glider.services.passwords.controller.PasswordsController.WRONG_TAIL_MESSAGE"
    ]
  },
  {
    "name": "val brand: String",
    "description": "com.tecknobit.glider.services.users.entities.ConnectedDevice.brand",
    "location": "backend/com.tecknobit.glider.services.users.entities/-connected-device/brand.html",
    "searchKeys": [
      "brand",
      "val brand: String",
      "com.tecknobit.glider.services.users.entities.ConnectedDevice.brand"
    ]
  },
  {
    "name": "val browser: String",
    "description": "com.tecknobit.glider.services.users.entities.ConnectedDevice.browser",
    "location": "backend/com.tecknobit.glider.services.users.entities/-connected-device/browser.html",
    "searchKeys": [
      "browser",
      "val browser: String",
      "com.tecknobit.glider.services.users.entities.ConnectedDevice.browser"
    ]
  },
  {
    "name": "val configuration: PasswordConfiguration",
    "description": "com.tecknobit.glider.services.passwords.entities.Password.configuration",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password/configuration.html",
    "searchKeys": [
      "configuration",
      "val configuration: PasswordConfiguration",
      "com.tecknobit.glider.services.passwords.entities.Password.configuration"
    ]
  },
  {
    "name": "val creationDate: Long",
    "description": "com.tecknobit.glider.services.passwords.entities.Password.creationDate",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password/creation-date.html",
    "searchKeys": [
      "creationDate",
      "val creationDate: Long",
      "com.tecknobit.glider.services.passwords.entities.Password.creationDate"
    ]
  },
  {
    "name": "val device: ConnectedDevice",
    "description": "com.tecknobit.glider.services.users.entities.DeviceUserSession.device",
    "location": "backend/com.tecknobit.glider.services.users.entities/-device-user-session/device.html",
    "searchKeys": [
      "device",
      "val device: ConnectedDevice",
      "com.tecknobit.glider.services.users.entities.DeviceUserSession.device"
    ]
  },
  {
    "name": "val eventDate: Long",
    "description": "com.tecknobit.glider.services.passwords.entities.PasswordEvent.eventDate",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password-event/event-date.html",
    "searchKeys": [
      "eventDate",
      "val eventDate: Long",
      "com.tecknobit.glider.services.passwords.entities.PasswordEvent.eventDate"
    ]
  },
  {
    "name": "val events: List<PasswordEvent>",
    "description": "com.tecknobit.glider.services.passwords.entities.Password.events",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password/events.html",
    "searchKeys": [
      "events",
      "val events: List<PasswordEvent>",
      "com.tecknobit.glider.services.passwords.entities.Password.events"
    ]
  },
  {
    "name": "val id: String",
    "description": "com.tecknobit.glider.services.passwords.dtos.PasswordMask.id",
    "location": "backend/com.tecknobit.glider.services.passwords.dtos/-password-mask/id.html",
    "searchKeys": [
      "id",
      "val id: String",
      "com.tecknobit.glider.services.passwords.dtos.PasswordMask.id"
    ]
  },
  {
    "name": "val lastLogin: Long",
    "description": "com.tecknobit.glider.services.users.entities.DeviceUserSession.lastLogin",
    "location": "backend/com.tecknobit.glider.services.users.entities/-device-user-session/last-login.html",
    "searchKeys": [
      "lastLogin",
      "val lastLogin: Long",
      "com.tecknobit.glider.services.users.entities.DeviceUserSession.lastLogin"
    ]
  },
  {
    "name": "val length: Int",
    "description": "com.tecknobit.glider.services.passwords.entities.PasswordConfiguration.length",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password-configuration/length.html",
    "searchKeys": [
      "length",
      "val length: Int",
      "com.tecknobit.glider.services.passwords.entities.PasswordConfiguration.length"
    ]
  },
  {
    "name": "val model: String",
    "description": "com.tecknobit.glider.services.users.entities.ConnectedDevice.model",
    "location": "backend/com.tecknobit.glider.services.users.entities/-connected-device/model.html",
    "searchKeys": [
      "model",
      "val model: String",
      "com.tecknobit.glider.services.users.entities.ConnectedDevice.model"
    ]
  },
  {
    "name": "val password: Password",
    "description": "com.tecknobit.glider.services.passwords.entities.PasswordEvent.password",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password-event/password.html",
    "searchKeys": [
      "password",
      "val password: Password",
      "com.tecknobit.glider.services.passwords.entities.PasswordEvent.password"
    ]
  },
  {
    "name": "val password: String",
    "description": "com.tecknobit.glider.services.passwords.dtos.PasswordMask.password",
    "location": "backend/com.tecknobit.glider.services.passwords.dtos/-password-mask/password.html",
    "searchKeys": [
      "password",
      "val password: String",
      "com.tecknobit.glider.services.passwords.dtos.PasswordMask.password"
    ]
  },
  {
    "name": "val passwords: List<Password>",
    "description": "com.tecknobit.glider.services.users.entities.GliderUser.passwords",
    "location": "backend/com.tecknobit.glider.services.users.entities/-glider-user/passwords.html",
    "searchKeys": [
      "passwords",
      "val passwords: List<Password>",
      "com.tecknobit.glider.services.users.entities.GliderUser.passwords"
    ]
  },
  {
    "name": "val scopes: String",
    "description": "com.tecknobit.glider.services.passwords.dtos.PasswordMask.scopes",
    "location": "backend/com.tecknobit.glider.services.passwords.dtos/-password-mask/scopes.html",
    "searchKeys": [
      "scopes",
      "val scopes: String",
      "com.tecknobit.glider.services.passwords.dtos.PasswordMask.scopes"
    ]
  },
  {
    "name": "val tail: String",
    "description": "com.tecknobit.glider.services.passwords.dtos.PasswordMask.tail",
    "location": "backend/com.tecknobit.glider.services.passwords.dtos/-password-mask/tail.html",
    "searchKeys": [
      "tail",
      "val tail: String",
      "com.tecknobit.glider.services.passwords.dtos.PasswordMask.tail"
    ]
  },
  {
    "name": "val type: ConnectedDeviceType",
    "description": "com.tecknobit.glider.services.users.entities.ConnectedDevice.type",
    "location": "backend/com.tecknobit.glider.services.users.entities/-connected-device/type.html",
    "searchKeys": [
      "type",
      "val type: ConnectedDeviceType",
      "com.tecknobit.glider.services.users.entities.ConnectedDevice.type"
    ]
  },
  {
    "name": "val type: PasswordEventType",
    "description": "com.tecknobit.glider.services.passwords.entities.PasswordEvent.type",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password-event/type.html",
    "searchKeys": [
      "type",
      "val type: PasswordEventType",
      "com.tecknobit.glider.services.passwords.entities.PasswordEvent.type"
    ]
  },
  {
    "name": "val type: PasswordType",
    "description": "com.tecknobit.glider.services.passwords.entities.Password.type",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password/type.html",
    "searchKeys": [
      "type",
      "val type: PasswordType",
      "com.tecknobit.glider.services.passwords.entities.Password.type"
    ]
  },
  {
    "name": "val user: GliderUser",
    "description": "com.tecknobit.glider.services.passwords.entities.Password.user",
    "location": "backend/com.tecknobit.glider.services.passwords.entities/-password/user.html",
    "searchKeys": [
      "user",
      "val user: GliderUser",
      "com.tecknobit.glider.services.passwords.entities.Password.user"
    ]
  }
]